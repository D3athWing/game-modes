/**
 *	Common script between Elite and Heroes
 *
 *	Warning: This script can't be used alone and is only meant to be extended by Elite and Heroes
 */

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const	CompatibleMapTypes	"EliteArena, HeroesArena"
#Const	ModeSportVersion	"2013-11-12"
#Const	ModeSportScriptName	"ModeSport.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Json.Script.txt" as Json
#Include "Libs/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Toss.Script.txt" as Toss
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/WarmUp2.Script.txt" as WarmUp2
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_Mode				0		as _("Mode 0: classic, 1: free")		///< Less restrictive mode for casual play
#Setting S_TimeLimit		60		as _("Attack time limit")				///< Time for an attack on a map
#Setting S_TimePole			15		as _("Capture time limit")				///< Time allowed to reach the pole by the end of the attack
#Setting S_TimeCapture		1.5		as _("Capture duration by pole")		///< Time to capture a pole for the attack clan (* NbPoles)
#Setting S_WarmUpDuration	90		as _("Warmup duration (0: disabled)")	///< Duration of the warmup
#Setting S_MapWin			2		as _("Number of maps to win a match")	///< How many maps a clan has to win to win the match
#Setting S_TurnGap			2		as _("Minimum points gap to win a map")	///< Points lead necessary to win a map
#Setting S_TurnLimit		15		as _("Default map points limit")		///< Maximum number of points before next map
#Setting S_DeciderTurnLimit	20		as _("Decider map points limit")		///< Points limit on decider map
#Setting S_QuickMode		False	as _("Less time between rounds")		///< Mutliplier for the sleep times between rounds
#Setting S_Matchmaking		False	as "<hidden>"							///< Use Elite with matchmaking
#Setting S_MatchmakingSleep	0		as "<hidden>" 							///< Matchmaking match end duration (-1: infinite)
#Setting S_UseLegacyCallback True	as "<hidden>"							///< Send the old JSON callbacks
// Clublinks settings
#Setting S_UsePlayerClublinks		False	as _("Use players Clublinks")	///< Use the players clublinks, or otherwise use the default teams
#Setting S_ForceClublinkTeam1		""		as "<hidden>"	///< Force the Clublink of team 1 (format: http://www.example.com/MyTeam.Club.xml)
#Setting S_ForceClublinkTeam2		""		as "<hidden>"	///< Force the Clublink of team 2 (format: http://www.example.com/MyTeam.Club.xml)
#Setting S_DisplaySponsors			True	as "<hidden>"	///< Display the sponsors of the attacker when spectating him
#Setting S_RestartMatchOnTeamChange	False	as "<hidden>"	///< Restart the match after the warm up if the teams have changed
// Elite Practice settings
#Setting S_Practice				False	as _("Play in practice mode")
#Setting S_PracticeRoundLimit	3		as _("Number of attack turns by player in practice mode")


#Const C_WURocketAmmoMax			4	///< Rocket ammo max
#Const C_WURocketAmmoGain			1.	///< Rocket ammo regen speed
#Const C_WULaserAmmoMax				1	///< Laser ammo max
#Const C_WULaserAmmoGain			1.	///< Laser ammo regen speed
#Const C_WUNucleusAmmoMax			1	///< Nucleus ammo max
#Const C_WUNucleusAmmoGain			1.3	///< Nucleus ammo regen speed
#Const C_DefStaminaMaxMultiplier	0.7 ///< Stamina amount multiplier for the defense
#Const C_AtkStaminaMaxMultiplier	1.	///< Stamina amount multiplier for the attack

#Const C_AtkArmorMax	300	///< Starting armor for atk players
#Const C_DefArmorMax	100	///< Starting armor for def players

#Const C_WinTimeLimit			1
#Const C_WinCapture				2
#Const C_WinAttackEliminated	3
#Const C_WinDefenseEliminated	4

#Const C_WeaponLaser	1
#Const C_WeaponRocket	2
#Const C_WeaponNucleus	3

#Const C_WaitConnectionTimeLimit	60000

#Const C_SpecRefreshInterval	250 ///< Interval between the refresh of the spectators properties
#Const C_SequenceWarmUp			1	///< Scores table mode warm up
#Const C_SequencePlaying		2	///< Scores table mode playing
#Const C_SequencePodium			3	///< Scores table mode podium
#Const C_UI_Colors [
	"BG"		=> "222d",
	"Separator"	=> "eeef",
	"Text"		=> "fffc"
]

#Const C_BlueBotsNb	0	///< Blue bots number
#Const C_RedBotsNb	0	///< Red bots number

// ---------------------------------- //
// Command
// ---------------------------------- //
#Command Command_MatchPointsClan1			(Integer)	as _("Match points for clan 1")
#Command Command_MatchPointsClan2			(Integer)	as _("Match points for clan 2")
#Command Command_CurrentMapPointsClan1		(Integer)	as _("Current map points for clan 1")
#Command Command_CurrentMapPointsClan2		(Integer)	as _("Current map points for clan 2")
#Command Command_PreviousMapsPointsClan1	(Integer)	as _("Previous maps points for clan 1")
#Command Command_PreviousMapsPointsClan2	(Integer)	as _("Previous maps points for clan 2")
#Command Command_TieBreakDefElimClan1		(Integer)	as _("Tie break defender elimination for clan 1")
#Command Command_TieBreakDefElimClan2		(Integer)	as _("Tie break defender elimination for clan 2")
#Command Command_ForceFirstAtkClan			(Integer)	as _("Force first attacking clan on the map (1: Blue, 2: Red)")
#Command Command_ForceTossWinner			(Integer)	as _("Force toss winner (1: Blue, 2: Red)")
#Command Command_ForceWarmUp				(Boolean)	as _("Set pause")
#Command Command_ForceClublinkReload		(Boolean)	as _("Force clublink reload")

// ---------------------------------- //
// Globales variables
// ---------------------------------- //
declare Integer G_AtkClan; 						///< Define wich Clan is currently attacking (1 player)
declare Integer G_DefClan; 						///< Define wich Clan is currently defending (3 players)
declare Integer	G_CheckpointsNb;				///< Number of checkpoints				
declare Integer[Integer] G_MapScores;			///< Number of map won by each clan
declare	Integer[Integer] G_MatchAtkPoints;		///< Number of successful atk for each clan during the match
declare	Integer[Integer] G_MatchDefElim;		///< Number of defenders eliminated by each clan during the match
declare Integer[Integer] G_MatchBestCaptureTime;///< Fastest capture time for each clan during the match
declare Integer[Integer] G_MatchPoints;			///< Number of points cumulated since the beginning of the match
declare	Integer[Integer] G_MapAtkPoints;		///< Number of successful atk for each clan during the map
declare	Integer[Integer] G_MapDefElim;			///< Number of defenders eliminated by each clan during the map
declare Integer[Integer] G_MapBestCaptureTime;	///< Fastest capture time for each clan during the map
declare Integer[Integer] G_TieBreakDefElim;		///< Number of defenders eliminated by each clan during the tie break
declare Integer[Integer] G_AtkSlot;				///< Current atk slot
declare Ident	G_AtkPlayerId;					///< Current atk player Id
declare Ident	G_AtkElimPlayerId;				///< Id of the player who eliminated the atk
declare Vec3	G_MapSpecCamDirection;			///< Spectator camera orientation
declare Text	G_LongestRailName;				///< Name of the player with the longest Laser hit
declare Real	G_LongestRailDistance;			///< Distance of the longest Laser hit
declare Integer	G_LastSpecUpdate;				///< Last time the spectators were updated
declare Boolean G_TieBreak;						///< Match is in tie break
declare Boolean G_UseEliteB2;					///< Use the Beta 2 gameplay
declare Text[]	G_TempAllies;					///< Logins list of matchmaking temporary allies
declare Ident[]	G_PrevMapUsersIds;				///< The list of users from the previous map 

declare Integer G_Override_FirstAtkClan;
declare Integer G_Override_TossWinner;
declare Boolean G_Override_NeedWarmUp;
declare Boolean G_Override_ForceClublinkReload;

// ---------------------------------- //
// Extend
// ---------------------------------- //

***LogVersion***
***
MB_LogVersion(ModeSportScriptName, ModeSportVersion);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(Json::GetScriptName(), Json::GetScriptVersion());
MB_LogVersion(Toss::GetScriptName(), Toss::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(Layers::GetScriptName(), Layers::GetScriptVersion());
MB_LogVersion(WarmUp2::GetScriptName(), WarmUp2::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(Interface::GetScriptName(), Interface::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
***

// ---------------------------------- //
// Server initialization
// ---------------------------------- //
***InitServer***
***
declare VoteClanNb = 0;
declare FirstAtk = MathLib::Rand(1, 2);
declare OldMode = S_Mode;
declare WinnerTurnClan = -1;		///< Winner Clan for a turn
declare WinnerMapClan = -1;			///< Winner Clan for a map
declare WinnerSubmatchClan = -1;	///< Winner Clan for a submatch (KotM)
declare WinnerMatchClan = -1;		///< Winner Clan for a match
declare WinType = -1;				///< Type of victory for the turn: timelimit = 1, pole capture=2, etc.
declare SleepMultiplier = 1.;

declare LayerAttached = False;
declare LayerDetached = False;
declare LayerUpdated = False;
declare LayerDestroyed = False;

declare netwrite Integer Clan1MapPoints for XmlRpc;
declare netwrite Integer Clan1MatchPoints for XmlRpc;
declare netwrite Integer Clan2MapPoints for XmlRpc;
declare netwrite Integer Clan2MatchPoints for XmlRpc;
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***StartServer***
***
// ---------------------------------- //
// Init Settings
assert(S_Mode >= 0 && S_Mode <= 1);
VoteClanNb = 1;
MB_UsePlayerClublinks	= S_UsePlayerClublinks;
UsePlayerTagging = True;
G_AtkSlot = [1 => 1, 2 => 1];
WarmUp2::Load();
WarmUp2::CreateGroup("Clan1", C_RequiredPlayersNb);
WarmUp2::CreateGroup("Clan2", C_RequiredPlayersNb);
WarmUp2::DisplayClanSelection(True);

// ---------------------------------- //
// Create rules
---Rules---

// ---------------------------------- //
// Layers creation
// UI All
declare LayerScoresTableId	= Layers::Create("ScoresTable", CreateLayerScoresTable());
// UI Players
declare LayerSpawnScreenAttackId	= Layers::Create("SpawnScreenAttack");
declare LayerSpawnScreenDefendId	= Layers::Create("SpawnScreenDefend");

Layers::GetFromId(LayerScoresTableId).Type = CUILayer::EUILayerType::ScoresTable;
Layers::GetFromId(LayerSpawnScreenAttackId).Type = CUILayer::EUILayerType::ScreenIn3d;
Layers::GetFromId(LayerSpawnScreenDefendId).Type = CUILayer::EUILayerType::ScreenIn3d;

LayerUpdated = Layers::Update("SpawnScreenAttack", UpdateLayerSpawnScreen("Attack"));
LayerUpdated = Layers::Update("SpawnScreenDefend", UpdateLayerSpawnScreen("Defend"));

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
***

// ---------------------------------- //
// Match initialization
// ---------------------------------- //
***InitMatch***
***
declare Integer TossWinner;
***

// ---------------------------------- //
// Match start
// ---------------------------------- //
***StartMatch***
***
if (MB_UseScriptCallbacks && S_UseLegacyCallback) XmlRpc.SendCallback("BeginMatch", Json::Enfold(Json::Stringify("MatchNumber", MB_SectionMatchNb)));
// ---------------------------------- //
// Initialize match goal average
G_MapScores				= [1 => 0, 2 => 0];
G_MatchAtkPoints		= [1 => 0, 2 => 0];
G_MatchDefElim			= [1 => 0, 2 => 0];
G_MatchBestCaptureTime 	= [1 => 0, 2 => 0];
G_MatchPoints			= [1 => 0, 2 => 0];

// ---------------------------------- //
// Set mode options
UseClans = True;
MB_UseSectionRound = True;
MB_UseSectionTurn = True;

G_PrevMapUsersIds = Ident[];
G_Override_FirstAtkClan = -1;
G_Override_TossWinner = -1;
G_Override_NeedWarmUp = False;
WinnerMatchClan = -1;
TossWinner = -1;
***

// ---------------------------------- //
// Map initialization
// ---------------------------------- //
***InitMap***
***
declare CSmBlockPole[] Goals;
declare CSmBlockPole[] Checkpoints;
declare Boolean WinByForfeit;
declare Boolean TokenUsed;
declare Text PrevClan1Color;
declare Text PrevClan2Color;
declare Save_MatchDefElim = G_MatchDefElim;
declare Save_MapDefElim = G_MapDefElim;
declare Save_TieBreakDefElim = G_TieBreakDefElim;

UIManager.UIAll.Hud3dMarkers = ""; ///< Remove the markers from the previous map for the intro
if (S_Matchmaking) MB_UseIntro = False;
else MB_UseIntro = True;
***

// ---------------------------------- //
// Map start
// ---------------------------------- //
***StartMap***
***
if (MB_UseScriptCallbacks && S_UseLegacyCallback) XmlRpc.SendCallback("BeginMap", Json::Enfold(Json::Stringify("MapNumber", MB_SectionMapNb)));
G_MapSpecCamDirection = GetOverviewCamDirection();

// ---------------------------------- //
// Initialize anchors
Goals = CSmBlockPole[];
Checkpoints = CSmBlockPole[];
foreach (Pole in BlockPoles) {
	if (Pole.Tag == "Goal A" || Pole.Tag == "Goal B" || Pole.Tag == "Goal C") Goals.add(Pole);
	else if (Pole.Tag == "Checkpoint") Checkpoints.add(Pole);
}
G_CheckpointsNb = Checkpoints.count;
// Compatibility with old MapType
if (Goals.count <= 0) {
	MB_Log("Old MapType compatibility");
	declare OldPole <=> SM::GetPole("Goal", 0);
	if (OldPole != Null) Goals.add(OldPole);
}

// ---------------------------------- //
// Initialize all scores
Score::MatchBegin();
G_MapAtkPoints			= [1 => 0, 2 => 0];
G_MapDefElim			= [1 => 0, 2 => 0];
G_TieBreakDefElim		= [1 => 0, 2 => 0];
G_MapBestCaptureTime	= [1 => 0, 2 => 0];

foreach (Score in Scores) {	
	declare NbHit for Score = 0;
	declare NbElimination for Score = 0;
	declare NbBeHit for Score = 0;
	declare DefRatio for Score = 0.;
	declare LaserLongest for Score = 0.;
	declare LaserHit for Score = 0;
	declare LaserShot for Score = 0;
	NbHit = 0;
	NbElimination = 0;
	NbBeHit = 0;
	DefRatio = 0.;
	LaserLongest = 0.;
	LaserHit = 0;
	LaserShot = 0;
}
Clan1Score = 0;
Clan2Score = 0;
foreach (Player in AllPlayers) {
	declare netwrite Net_LayerST_DefPoints for Player = 0;
	declare netwrite Net_LayerST_AtkPoints for Player = 0;
	Net_LayerST_DefPoints = 0;
	Net_LayerST_AtkPoints = 0;
}

// ---------------------------------- //
// Update the players clublinks
if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
else Clublink::DefineTeamFromUrl(S_ForceClublinkTeam1, S_ForceClublinkTeam2);
Clublink::SyncUpdate();

// ---------------------------------- //
// Initialize UI
UIManager.ResetAll();
InitUi();
SpawnScreen::AttachRules();
Clublink::Attach();
Clublink::SetSponsorsDisplay(False);
LayerAttached = Layers::Attach("ScoresTable", NullId);
LayerUpdated = Layers::Update("ScoresTable", CreateLayerScoresTable());
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.UISequence_CanSkipIntroMT = True;
PrevClan1Color = Teams[0].ColorText;
PrevClan2Color = Teams[1].ColorText;

---RulesReminder---

// ---------------------------------- //
// Initialize roles for first round
G_AtkClan = FirstAtk;
G_DefClan = 3 - FirstAtk;
FirstAtk = G_DefClan;	// Swap for next map.
G_AtkSlot = [1 => 1, 2 => 1];

Users_SetNbFakeUsers(C_BlueBotsNb, C_RedBotsNb);

WinnerTurnClan = -1;
WinnerMapClan = -1;
WinnerSubmatchClan = -1;
WinByForfeit = False;
TokenUsed = False;
G_AtkPlayerId = NullId;
G_LongestRailName = "-";
G_LongestRailDistance = 0.;
G_TieBreak = False;
G_TempAllies = Text[];
declare NeedWarmUp = True;
declare MapWinnerName = "";
---SelectNextMap---

// ---------------------------------- //
// Wait players when using matchmaking
if (S_Matchmaking) {
	WaitConnection();
	NeedWarmUp = False;
}

---StartUsingToken---
***

// ---------------------------------- //
// Init start
// ---------------------------------- //
***InitTurn***
***
declare PoleTime = 0;
declare LastActionClanNb = 0;
declare SoundVariant = -1;
declare LastStatusTime = 0;
declare GoalCanBeCaptured = False;
declare AtkIsEliminated = False;
declare Win_TimeLimit = False;
declare Win_AtkEliminated = False;
declare Win_LastDefEliminated = False;
declare Win_Capture = False;
***

// ---------------------------------- //
// Turn start
// ---------------------------------- //
***StartTurn***
***
// ---------------------------------- //
// Wait players sycnhro
Mode::Synchro_DoBarrier();

SM::UnspawnAllPlayers();
foreach (Player in AllPlayers) {
	SetPlayerClan(Player, Player.RequestedClan);
	if (Player.CurrentClan == 1) WarmUp2::SetPlayerGroup(Player, "Clan1");
	else if (Player.CurrentClan == 2) WarmUp2::SetPlayerGroup(Player, "Clan2");
}
Score::RoundBegin();
InitUi();
UpdateMarkers();
AtkIsEliminated = False;
Win_TimeLimit = False;
Win_AtkEliminated = False;
Win_LastDefEliminated = False;
Win_Capture = False;
Message::CleanAllMessages();
Message::SetDefaultAllMessages("");

if (S_QuickMode) SleepMultiplier = 0.5;
else SleepMultiplier = 1.;

// ---------------------------------- //
// Manage the players order
WarmUp2::Clean();
if (S_Mode == 1 || S_Matchmaking) WarmUp2::Fill();

// ---------------------------------- //
// Warm Up
if (S_Mode == 1 || S_Matchmaking) {
	if (WarmUp2::GetPlayersNb("Clan1") < 1 || WarmUp2::GetPlayersNb("Clan2") < 1) {
		NeedWarmUp = True;
	}
} else {
	if (WarmUp2::GetPlayersNb("Clan1") < C_RequiredPlayersNb || WarmUp2::GetPlayersNb("Clan2") < C_RequiredPlayersNb) {
		NeedWarmUp = True;
	}
}

if ((NeedWarmUp || G_Override_NeedWarmUp) && !S_Matchmaking) {
	NeedWarmUp = False;
	MB_CurrentSection = "WarmUp";
	WarmUp2();
	MB_CurrentSection = "StartTurn";
	
	G_Override_NeedWarmUp = False;
	MB_StopTurn = True;
	MB_SectionTurnNb -= 1;
	
	// ---------------------------------- //
	// Restart the script if the mode settings has changed
	assert(S_Mode >= 0 && S_Mode <= 1);
	if (S_Mode != OldMode) {
		OldMode = S_Mode;
		MatchEndRequested = True;
		MB_Log("Changing mode > Restart match");
		declare Message = TextLib::Compose("$fff%1", _("Change mode and start a new match."));
		UIManager.UIAll.SendChat(Message);
		break;
	} 
	// ---------------------------------- //
	// Restart the match if the teams have changed
	else if (S_RestartMatchOnTeamChange) {
		declare NeedRestart = False;
		declare Order = [1 => WarmUp2::GetGroup("Clan1"), 2 => WarmUp2::GetGroup("Clan2")];
		declare CurMapUsersIds = Ident[];
		for (I, 1, 2) {
			foreach (PlayerId in Order[I]) {
				if (Players.existskey(PlayerId)) CurMapUsersIds.add(Players[PlayerId].User.Id);
			}
		}
		
		if ((G_MapScores[1] > 0 || G_MapScores[2] > 0) && Clan1Score <= 0 && Clan2Score <= 0) {
			if (G_PrevMapUsersIds.count <= 0) G_PrevMapUsersIds = CurMapUsersIds;
			
			if (CurMapUsersIds.count != G_PrevMapUsersIds.count) {
				NeedRestart = True;
			} else {
				foreach (UserId in G_PrevMapUsersIds) {
					if (!CurMapUsersIds.exists(UserId)) {
						NeedRestart = True;
					}
				}
			}
		}
		G_PrevMapUsersIds = CurMapUsersIds;
		
		if (NeedRestart) {
			MatchEndRequested = True;
			MB_StopMatch = True;
			MB_Log("Teams changed > Restart the match");
			declare Message = TextLib::Compose("$fff%1", _("The teams have changed, the match will be restarted."));
			UIManager.UIAll.SendChat(Message);			
			break;
		} else {
			continue;
		}
	} else {
		continue;
	}
}
G_Override_NeedWarmUp = False;

// ---------------------------------- //
// IF WE PLAYED A WARM UP, THE TURN IS RESTARTED. THE FOLLOWING CODE IS NOT EXECUTED.
// ---------------------------------- //

// ---------------------------------- //
// Toss and determine who'll attack first on the map
if (S_Mode == 0 && !S_Matchmaking && MB_SectionTurnNb <= 1) {
	declare DecisiveMap = False;
	if (G_MapScores[1] == S_MapWin - 1 && G_MapScores[2] == S_MapWin - 1) DecisiveMap = True;
	
	// Override the toss winner
	if (G_Override_TossWinner == 1 || G_Override_TossWinner == 2) {
		if (MB_SectionMapNb == 1) {
			if (TossWinner == -1) VoteClanNb = G_Override_TossWinner;
			else {
				TossWinner = G_Override_TossWinner;
				VoteClanNb = 3 - TossWinner;
			}
		} else {
			if (MB_SectionMapNb % 2 == 0) {
				VoteClanNb = 3 - G_Override_TossWinner;
			} else {
				VoteClanNb = G_Override_TossWinner;
			}
		}
		G_Override_TossWinner = -1;
	} else {
		// Play the toss
		if (MB_SectionMapNb == 1) {
			if (TossWinner == -1) VoteClanNb = Toss::Toss();
			else VoteClanNb = 3 - TossWinner;	///< The looser of the map selection toss
		}
	}
	 
	// Don't use toss but goal average on decisive map
	if (DecisiveMap && MB_SectionMapNb > 1) {
		declare GoalAverage = GetGoalAverageBestClan();
		if (GoalAverage == 1 || GoalAverage == 2) {
			VoteClanNb = GoalAverage;
		}
	}
	
	// Override the side selection
	if (G_Override_FirstAtkClan == 1 || G_Override_FirstAtkClan == 2) {
		G_AtkClan = G_Override_FirstAtkClan;
		G_DefClan = 3 - G_AtkClan;
		FirstAtk = G_Override_FirstAtkClan;
		G_Override_FirstAtkClan = -1;
	}
	// Vote for side
	else {
		declare SelectedSide = Toss::SelectSide(VoteClanNb);
		if (SelectedSide == 1) {
			G_AtkClan = VoteClanNb;
			G_DefClan = 3 - VoteClanNb;
		} else if (SelectedSide == 2) {
			G_AtkClan = 3 - VoteClanNb;
			G_DefClan = VoteClanNb;
		}
	}
	VoteClanNb = 3 - VoteClanNb;
}

// Override the first atk clan
if (G_Override_FirstAtkClan == 1 || G_Override_FirstAtkClan == 2) {
	FirstAtk = G_Override_FirstAtkClan;
	if (MB_SectionTurnNb % 2 == 0) {
		G_AtkClan = 3 - G_Override_FirstAtkClan;
		G_DefClan = G_Override_FirstAtkClan;
	} else {
		G_AtkClan = G_Override_FirstAtkClan;
		G_DefClan = 3 - G_Override_FirstAtkClan;
	}
	G_Override_FirstAtkClan = -1;
}


// ---------------------------------- //
// Play team presentation
if (MB_SectionTurnNb <= 1) {
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	MB_PlayersPresentationSequence();
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
StartTime = -1;
EndTime = -1;

// ---------------------------------- //
// Get the next attacker
declare PreTurnEndTime = Now + MathLib::NearestInteger(2500 * SleepMultiplier);
declare NextAtkName = "";
declare Clan = "Clan1";
if (G_AtkClan == 2) Clan = "Clan2";
declare SlotNb = WarmUp2::GetSlotsNb(Clan);
declare I = 0;
while (True) {
	if (G_AtkSlot[G_AtkClan] > C_RequiredPlayersNb) G_AtkSlot[G_AtkClan] = 1;
	
	declare PlayerId = WarmUp2::GetSlot(Clan, G_AtkSlot[G_AtkClan]);
	if (PlayerId != NullId && Players.existskey(PlayerId)) {
		NextAtkName = Players[PlayerId].Name;
		G_AtkPlayerId = PlayerId;
		declare netwrite Net_Elite_AtkLogin for Teams[0] = "";
		declare netwrite Net_Elite_AtkSponsors for Teams[0] = Text[];
		Net_Elite_AtkLogin = Players[PlayerId].Login;
		if (S_DisplaySponsors) Net_Elite_AtkSponsors = Clublink::GetTeamSponsors(G_AtkClan-1);
		else Net_Elite_AtkSponsors.clear();
		break;
	}
	
	G_AtkSlot[G_AtkClan] += 1;
	I += 1;
	if (I >= SlotNb) break;
}

// ---------------------------------- //
// Attach the correct spawn screen layer and update the scores table
UpdateLayerScoresTable(C_SequencePlaying);
foreach (Player in Players) {
	if (Player.RequestedClan == G_AtkClan) {
		LayerAttached = Layers::Attach("SpawnScreenAttack", Player.Id);
		LayerDetached = Layers::Detach("SpawnScreenDefend", Player.Id);
	} else if (Player.RequestedClan == G_DefClan) {
		LayerAttached = Layers::Attach("SpawnScreenDefend", Player.Id);
		LayerDetached = Layers::Detach("SpawnScreenAttack", Player.Id);
	}
}

// ---------------------------------- //
// Play the pre turn sequence
declare TeamAtkName = "";
declare TeamDefName = "";
TeamAtkName = Teams[G_AtkClan - 1].ColorizedName;
TeamDefName = Teams[G_DefClan - 1].ColorizedName;
UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::PhaseChange;
UIManager.UIAll.BigMessageSoundVariant = 0;
UIManager.UIAll.StatusMessage = TextLib::Compose(
	_("$<%1$> attack - defense $<%2$>"), 
	TeamAtkName, 
	TeamDefName
);
UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> is attacking!"), NextAtkName);
while (Now <= PreTurnEndTime && !ServerShutdownRequested && !MatchEndRequested) {
	MB_Yield();
	ManageCommand();
	UpdateSpectators();
	ForceClublinkReload();
}
UIManager.UIAll.StatusMessage = "";
UIManager.UIAll.BigMessage = "";

// ---------------------------------- //
// Initialize variables
StartTime = Now + 3000;
EndTime = StartTime + S_TimeLimit * 1000;
PoleTime = (StartTime + (S_TimeLimit - S_TimePole) * 1000);
WinnerTurnClan = -1;
WinType = 0;
G_AtkElimPlayerId = NullId;

// ---------------------------------- //
// Init goals
foreach (Goal in Goals) {
	Goal.Gauge.Clan = G_DefClan;
	Goal.Gauge.Max = PoleTime - Now;
	Goal.Gauge.Speed = -1;
	Goal.Gauge.Value = Goal.Gauge.Max;
	Goal.Captured = False;
}
// ---------------------------------- //
// Init checkpoints
foreach (Checkpoint in Checkpoints) {
	Checkpoint.Gauge.Clan = G_DefClan;
	Checkpoint.Gauge.Max = 1;
	Checkpoint.Gauge.Speed = 0;
	Checkpoint.Gauge.Value = 0;
	Checkpoint.Captured = False;
}

// ---------------------------------- //
// Spawn players
SpawnThemAll(0);

// ---------------------------------- //
// Init UI
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.NoticesFilter_LevelToShowAsBigMessage = CUIConfig::ENoticeLevel::MatchInfo;
UIManager.UIAll.NoticesFilter_HideMapWarning = True;
UIManager.UIAll.CountdownEndTime = PoleTime;
UpdateSpectators(True);

// ---------------------------------- //
// Update the players clublinks
if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
Clublink::SyncUpdate();

if (PrevClan1Color != Teams[0].ColorText || PrevClan2Color != Teams[1].ColorText) {
	PrevClan1Color = Teams[0].ColorText;
	PrevClan2Color = Teams[1].ColorText;
	LayerUpdated = Layers::Update("ScoresTable", CreateLayerScoresTable());
}
UpdateLayerScoresTable(C_SequencePlaying);
UpdateMarkers();
		
declare AtkPlayer <=> CSmPlayer;
if (Players.existskey(G_AtkPlayerId)) AtkPlayer <=> Players[G_AtkPlayerId];
if (MB_UseScriptCallbacks && S_UseLegacyCallback) {
	XmlRpc.SendCallback("BeginTurn", Json::Enfold(Json::Merge([
		Json::Stringify("TurnNumber", MB_SectionTurnNb),
		TurnStringify(),
		Json::Stringify("AttackingClan", G_AtkClan),
		Json::Stringify("DefendingClan", G_DefClan),
		PlayerStringify("AttackingPlayer", AtkPlayer),
		PlayersStringify("DefendingPlayers", G_DefClan)
	])));
}

if (!TokenUsed) {
	---GetAndUseToken---
	TokenUsed = True;
}

// ---------------------------------- //
// Save the list of users playing on this map
declare Order = [1 => WarmUp2::GetGroup("Clan1"), 2 => WarmUp2::GetGroup("Clan2")];
declare CurMapUsersIds = Ident[];
for (I, 1, 2) {
	foreach (PlayerId in Order[I]) {
		if (Players.existskey(PlayerId)) CurMapUsersIds.add(Players[PlayerId].User.Id);
	}
}
G_PrevMapUsersIds = CurMapUsersIds;

// ---------------------------------- //
// Save a back up to restore the game to this turn in case of a force warm up
Save_MatchDefElim		= G_MatchDefElim;
Save_MapDefElim			= G_MapDefElim;
Save_TieBreakDefElim	= G_TieBreakDefElim;
foreach (Score in Scores) {
	declare LaserLongest	for Score = 0.;
	declare LaserHit		for Score = 0;
	declare NbHit			for Score = 0;
	declare NbElimination	for Score = 0;
	declare NbBeHit			for Score = 0;
	declare DefRatio		for Score = 0.;
	declare LaserShot		for Score = 0;
	
	declare Save_LaserLongest	for Score = LaserLongest;
	declare Save_LaserHit		for Score = LaserHit;
	declare Save_NbHit			for Score = NbHit;
	declare Save_NbElimination	for Score = NbElimination;
	declare Save_NbBeHit		for Score = NbBeHit;
	declare Save_DefRatio		for Score = DefRatio;
	declare Save_LaserShot		for Score = LaserShot;
	
	Save_LaserLongest	= LaserLongest;
	Save_LaserHit		= LaserHit;
	Save_NbHit			= NbHit;
	Save_NbElimination	= NbElimination;
	Save_NbBeHit		= NbBeHit;
	Save_DefRatio		= DefRatio;
	Save_LaserShot		= LaserShot;
}
***

***Yield***
***
Message::Loop();
Clublink::Update();
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***PlayLoop***
***
declare DefElimintedNb = 0;
SM::UnspawnPlayersChangingClan();
ManageCommand();
ForceClublinkReload();

// ---------------------------------- //
// Pole management
---PoleManagement---

// ---------------------------------- //
// Validate events
---ValidateEvents---

// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// Standard event management
	
	// ---------------------------------- //
	// OnHit
	if (Event.Type == CSmModeEvent::EType::OnHit) {
		if (Win_TimeLimit || Win_Capture) {
			Discard(Event);
		} else if (Event.Shooter != Null && Event.Victim != Null) {
			if (Win_AtkEliminated) {
				if (Event.Victim.Id == G_AtkPlayerId) {
					---EventOnHit---
				} else {
					Discard(Event);
				}
			} else if (Win_LastDefEliminated) {
				if (Event.Victim.CurrentClan == G_DefClan) {
					---EventOnHit---
				} else {
					Discard(Event);
				}
			} else {
				---EventOnHit---
			}
		} else {
			Discard(Event);
		}
	}
	// ---------------------------------- //
	// OnArmorEmpty
	else if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
		if (Win_TimeLimit || Win_Capture) {
			Discard(Event);
		} else {
			if (Win_AtkEliminated) {
				if (Event.Victim.Id == G_AtkPlayerId) {
					---EventOnArmorEmpty---
				} else {
					Discard(Event);
				}
			} else if (Win_LastDefEliminated) {
				if (Event.Victim.CurrentClan == G_DefClan) {
					---EventOnArmorEmpty---
				} else {
					Discard(Event);
				}
			} else {
				---EventOnArmorEmpty---
			}
		}
	}
	// ---------------------------------- //
	// OnPlayerRequestRespawn
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
		if (Win_TimeLimit || Win_Capture) {
			Discard(Event);
		} else {
			if (Win_AtkEliminated) {
				if (Event.Player.Id == G_AtkPlayerId) {
					---EventOnPlayerRequestRespawn---
				} else {
					Discard(Event);
				}
			} else if (Win_LastDefEliminated) {
				if (Event.Player.CurrentClan == G_DefClan) {
					---EventOnPlayerRequestRespawn---
				} else {
					Discard(Event);
				}
			} else {
				---EventOnPlayerRequestRespawn---
			}
		}
	}
	// ---------------------------------- //
	// OnCapture
	else if (Event.Type == CSmModeEvent::EType::OnCapture) {
		if (Win_TimeLimit || Win_AtkEliminated || Win_LastDefEliminated) {
			Discard(Event);
		} else {
			---EventOnCapture---
		}
	}
	// ---------------------------------- //
	// OnShoot
	else if (Event.Type == CSmModeEvent::EType::OnShoot) {
		---EventOnShoot---
	}
	// ---------------------------------- //
	// OnNearMiss
	else if (Event.Type == CSmModeEvent::EType::OnNearMiss) {
		---EventOnNearMiss---
	}
	// ---------------------------------- //
	// OnPlayerAdded
	else if (Event.Type == CSmModeEvent::EType::OnPlayerAdded) {
		---EventOnPlayerAdded---
	}
	// ---------------------------------- //
	// OnPlayerRemoved
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRemoved) {
		---EventOnPlayerRemoved---
	}
	// ---------------------------------- //
	// Other cases
	else {
		PassOn(Event);
	}
}

// ---------------------------------- //
// Update Spectators and messages
UpdateSpectators();
if (LastStatusTime > 0 && LastStatusTime + 3000 < Now) {
	UIManager.UIAll.StatusMessage = "";
	LastStatusTime = 0;
}

// ---------------------------------- //
// Victory/defeat conditions check
if (Now > StartTime)  {
	// ---------------------------------- //
	// Win by reaching time limit
	if (Now >= EndTime) {
		MB_Log("Win by timelimit");
		WinnerTurnClan = G_DefClan ;
		WinType = C_WinTimeLimit;
		UpgradeScore(G_DefClan, 1);
		+++RegisterStats+++
		MB_StopTurn = True;
		declare AtkPlayer <=> CSmPlayer;
		if (Players.existskey(G_AtkPlayerId)) {
			AtkPlayer <=> Players[G_AtkPlayerId];
			UnspawnPlayer(AtkPlayer);
		}
	}

	if (WinnerTurnClan == -1) {
		// ---------------------------------- //
		// Win by elimination of attacking player
		if ((ClansNbPlayersAlive[G_AtkClan] <= 0 && ClansNbPlayersAlive[G_DefClan] > 0)
			|| AtkIsEliminated
			|| !Players.existskey(G_AtkPlayerId)
			|| (Players.existskey(G_AtkPlayerId) && Players[G_AtkPlayerId].SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
		) {
			MB_Log("Win by elimination of attack player");
			WinnerTurnClan = G_DefClan ;
			WinType = C_WinAttackEliminated;
			UpgradeScore(G_DefClan, 1);
			+++RegisterStats+++
			MB_StopTurn = True;
		} 
		// ---------------------------------- //
		// If the attacker is still alive
		else if (Players.existskey(G_AtkPlayerId)) {
			declare GoalCaptured = False;
			foreach (Goal in Goals) {
				if (Goal.Captured && Goal.Gauge.Clan == G_AtkClan) GoalCaptured = True;
			}
			
			// ---------------------------------- //
			// Win by elimination of all defending players
			declare AllDefElim = ClansNbPlayersAlive[G_DefClan] <= 0;
			---AllDefElim---
			
			if (AllDefElim) {
				MB_Log("Win by elimination of all defense players");
				WinType = C_WinDefenseEliminated;
			}
			// ---------------------------------- //
			// Win by capturing the pole
			else if (GoalCaptured) {
				// Save the fastest capture time
				if (G_MatchBestCaptureTime[G_AtkClan] <= 0 || Now - StartTime < G_MatchBestCaptureTime[G_AtkClan]) {
					G_MatchBestCaptureTime[G_AtkClan] = Now - StartTime;
				}
				if (G_MapBestCaptureTime[G_AtkClan] <= 0 || Now - StartTime < G_MapBestCaptureTime[G_AtkClan]) {
					G_MapBestCaptureTime[G_AtkClan] = Now - StartTime;
				}
				MB_Log("Win by reaching pole");
				WinType = C_WinCapture;
			}
			
			if (WinType == C_WinCapture || WinType == C_WinDefenseEliminated) {
				UpgradeScore(G_AtkClan, 1);
				WinnerTurnClan = G_AtkClan;
				+++RegisterStats+++
				MB_StopTurn = True;
			}
		}
	}
}

// ---------------------------------- //
// Force a warm up
if (G_Override_NeedWarmUp) MB_StopTurn = True;
***

// ---------------------------------- //
// Turn end
// ---------------------------------- //
***EndTurn***
***
EndTime = Now;
UIManager.UIAll.CountdownEndTime = -1;
Score::RoundEnd();
UpdateHeader();
Message::SetDefaultAllMessages("");

+++EndTurnBegin+++

// ---------------------------------- //
// Save the current clan of each player in his score
foreach (Player in Players) {
	if (Player.Score == Null) continue;
	Player.Score.LadderClan = Player.CurrentClan;
}

// Display the "attacker capture the pole" message
if (WinType == C_WinCapture) {
	Message::SendBigMessage(_("Goal captured!"), 3000, 2, CUIConfig::EUISound::VictoryPoint, 0);
}

// Remove the gauge UI from the attacker
if (Players.existskey(G_AtkPlayerId)) {
	declare UI <=> UIManager.GetUI(Players[G_AtkPlayerId]);
	if (UI != Null) {
		UI.GaugeRatio = -1.;
		UI.GaugeMessage = "";
		UI.GaugeClan = 0;
	}
}
Elite_Sleep(1);

// ---------------------------------- //
// XmlRpc CallBack
declare AtkPlayer <=> CSmPlayer;
declare HeaderClanScores = Integer[Integer];
if (Players.existskey(G_AtkPlayerId)) AtkPlayer <=> Players[G_AtkPlayerId];
HeaderClanScores = [1 => G_MapScores[1], 2 => G_MapScores[2]];

declare WinTypeString = "Unknown";
switch(WinType) {
	case C_WinTimeLimit: WinTypeString = "TimeLimit";
	case C_WinCapture: WinTypeString = "Capture";
	case C_WinAttackEliminated: WinTypeString = "AttackEliminated";
	case C_WinDefenseEliminated: WinTypeString = "DefenseEliminated";
}

if (MB_UseScriptCallbacks && S_UseLegacyCallback) {
	XmlRpc.SendCallback("EndTurn", Json::Enfold(Json::Merge([
		Json::Stringify("TurnNumber", MB_SectionTurnNb),
		TurnStringify(),
		Json::Stringify("AttackingClan", G_AtkClan),
		Json::Stringify("DefendingClan", G_DefClan),
		PlayerStringify("AttackingPlayer", AtkPlayer),
		Json::Stringify("TurnWinnerClan", WinnerTurnClan),
		Json::Stringify("WinType", WinTypeString),
		Json::Stringify("Clan1RoundScore", Clan1Score),
		Json::Stringify("Clan2RoundScore", Clan2Score),
		Json::Stringify("Clan1MapScore", HeaderClanScores[1]),
		Json::Stringify("Clan2MapScore", HeaderClanScores[2]),
		PlayersStringify("ScoresTable", 0, True)
	])));
}

// ---------------------------------- //
// Update UI
UIManager.UIAll.StatusMessage = "";
UIManager.UIAll.NoticesFilter_HideMapWarning = False;
UpdateLayerScoresTable(C_SequencePlaying);
+++EndTurnUIStart+++

// ---------------------------------- //
// Restart the script if the mode settings has changed
assert(S_Mode >= 0 && S_Mode <= 1);
if (S_Mode != OldMode) {
	OldMode = S_Mode;
	MatchEndRequested = True;
	MB_Log("Changing mode > Restart match");
	declare Message = TextLib::Compose("$fff%1", _("Change mode and start a new match."));
	UIManager.UIAll.SendChat(Message);
}

// ---------------------------------- //
// Skip the turn end sequence if a vote passed
if (MatchEndRequested) break;

// ---------------------------------- //
// Skip the turn end sequence if a warm up was requested
// And restore the turn to its previous state
if (G_Override_NeedWarmUp && WinType == 0) {
	MB_SectionTurnNb -= 1;
	
	G_MatchDefElim		= Save_MatchDefElim;
	G_MapDefElim		= Save_MapDefElim;
	G_TieBreakDefElim	= Save_TieBreakDefElim;
	foreach (Score in Scores) {
		declare LaserLongest	for Score = 0.;
		declare LaserHit		for Score = 0;
		declare NbHit			for Score = 0;
		declare NbElimination	for Score = 0;
		declare NbBeHit			for Score = 0;
		declare DefRatio		for Score = 0.;
		declare LaserShot		for Score = 0;
		
		declare Save_LaserLongest	for Score = LaserLongest;
		declare Save_LaserHit		for Score = LaserHit;
		declare Save_NbHit			for Score = NbHit;
		declare Save_NbElimination	for Score = NbElimination;
		declare Save_NbBeHit		for Score = NbBeHit;
		declare Save_DefRatio		for Score = DefRatio;
		declare Save_LaserShot		for Score = LaserShot;
		
		LaserLongest	= Save_LaserLongest;
		LaserHit		= Save_LaserHit;
		NbHit			= Save_NbHit;
		NbElimination	= Save_NbElimination;
		NbBeHit			= Save_NbBeHit;
		DefRatio		= Save_DefRatio;
		LaserShot		= Save_LaserShot;
	}
	
	foreach (Player in AllPlayers) {
		if (Player.Score != Null) {
			declare NbHit for Player.Score = 0;
			declare netwrite Net_LayerST_DefPoints for Player = 0;
			Net_LayerST_DefPoints = NbHit;
		}
	}
	
	+++ForceWarmUp+++
	UpdateLayerScoresTable(C_SequencePlaying);
	UpdateHeader();
	continue;
}

// ---------------------------------- //
// Show the capture gauge of the most (but not) captured pole if any
declare GaugeValue = 0;
declare MostActivatedGoal <=> CSmBlockPole;
foreach (Goal in Goals) {
	Goal.Gauge.Speed = 0;

	if (Goal.Gauge.Clan == G_AtkClan && Goal.Gauge.Value > GaugeValue) {
		GaugeValue = Goal.Gauge.Value;
		MostActivatedGoal <=> Goal;
	}
}
if (MostActivatedGoal != Null
	&& MostActivatedGoal.Gauge.Value > 0 
	&& WinType != C_WinCapture
) {
	if (MostActivatedGoal.Gauge.ValueReal >= 1.) UIManager.UIAll.GaugeRatio = 0.99;
	else UIManager.UIAll.GaugeRatio = MostActivatedGoal.Gauge.ValueReal;
	UIManager.UIAll.GaugeClan = MostActivatedGoal.Gauge.Clan;
	UIManager.UIAll.GaugeMessage = "" ^ MathLib::FloorInteger(UIManager.UIAll.GaugeRatio*100) ^ "%";
}
Elite_Sleep(MathLib::NearestInteger(2000*SleepMultiplier));
StartTime = -1;
EndTime = -1;
SM::UnspawnAllPlayers();
Message::CleanAllMessages();

UIManager.UIAll.GaugeMessage = "";
UIManager.UIAll.GaugeRatio = -1000.;
UIManager.UIAll.GaugeClan = 0;

// ---------------------------------- //
// Check if we are in TieBreak
CheckTieBreak();

// ---------------------------------- //
// Check if a team wins the map
declare PointLimit = GetPointLimit();
declare GoalAverage = 3;
if (G_TieBreak) GoalAverage = GetGoalAverageBestClan();
declare TwoTeamsPlayedAtk = (MB_SectionTurnNb % 2 == 0);

if (
	Clan1Score >= S_TurnWin && Clan1Score > Clan2Score && Clan1Score - Clan2Score >= S_TurnGap
	|| Clan2Score >= S_TurnWin && Clan2Score > Clan1Score && Clan2Score - Clan1Score >= S_TurnGap
	|| Clan1Score >= PointLimit && Clan1Score > Clan2Score
	|| Clan2Score >= PointLimit && Clan2Score > Clan1Score
	//|| (G_TieBreak && TwoTeamsPlayedAtk && GoalAverage != 3)
	|| (S_Matchmaking && (ClansNbPlayers[1] <= 0 || ClansNbPlayers[2] <= 0))
) {
	// ---------------------------------- //
	// Find the winner of the map
	// ---------------------------------- //
	// Clan 1 withdraw
	if (S_Matchmaking && ClansNbPlayers[1] <= 0) {
		WinnerMapClan = 2;
		WinByForfeit = True;
	} 
	// ---------------------------------- //
	// Clan 2 withdraw
	else if (S_Matchmaking && ClansNbPlayers[2] <= 0) {
		WinnerMapClan = 1;
		WinByForfeit = True;
	}
	// ---------------------------------- //
	// Clan 1 wins the map with the best score
	else if ((Clan1Score > Clan2Score)) {
		WinnerMapClan = 1;
	}
	// ---------------------------------- //
	// Clan 2 wins the map with the best score
	else if ((Clan2Score > Clan1Score))  {
		WinnerMapClan = 2;
	}
	// ---------------------------------- //
	// In case of draw after the point limit is reached, determine the winner by goal average
	/*else if (Clan1Score == Clan2Score && Clan1Score + Clan2Score >= PointLimit * 2) {
		MB_Log("WinScoreLimit reached");
		
		if (GoalAverage == 1) {
			WinnerMapClan = 1;
		} else if (GoalAverage == 2) {
			WinnerMapClan = 2;
		} else {
			WinnerMapClan = 3;
		}
	}*/
	WinnerSubmatchClan = WinnerMapClan;
	
	if (WinnerMapClan != -1) MB_StopMap = True;
}

// ---------------------------------- //
// Play turn end sequence
if (!MB_StopSubmatch && !MB_StopMap) {
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
	if (WinnerTurnClan == G_AtkClan) UIManager.UIAll.BigMessageSoundVariant = 1;
	else if (WinnerTurnClan == G_DefClan) UIManager.UIAll.BigMessageSoundVariant = 0;
	
	declare EliminatorName = "";
	if (G_AtkElimPlayerId != NullId && Players.existskey(G_AtkElimPlayerId)) {
		EliminatorName = "$<"^Players[G_AtkElimPlayerId].Name^"$>";
	}
	
	if (WinType == C_WinTimeLimit) UIManager.UIAll.StatusMessage = _("Time limit reached.");
	else if (WinType == C_WinCapture) UIManager.UIAll.StatusMessage = _("Goal captured.");
	else if (WinType == C_WinAttackEliminated && EliminatorName == "") UIManager.UIAll.StatusMessage = _("Attacker eliminated.");
	else if (WinType == C_WinAttackEliminated && EliminatorName != "") {
		UIManager.UIAll.StatusMessage = TextLib::Compose(_("$<%1$> eliminated the attacker."), EliminatorName);
	}
	else if (WinType == C_WinDefenseEliminated) UIManager.UIAll.StatusMessage = _("All defenders eliminated.");
	
	declare Pseudo = _("Attacker");
	if (Players.existskey(G_AtkPlayerId)) Pseudo = Players[G_AtkPlayerId].Name;
	
	declare DefTeamName = Teams[G_DefClan - 1].ColorizedName;
	
	if (WinnerTurnClan == G_AtkClan) 
		UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the turn!"), Pseudo);
	else if (WinnerTurnClan == G_DefClan) 
		UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the turn!"), DefTeamName);
		
	if (!S_QuickMode) UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	Elite_Sleep(MathLib::NearestInteger(3000*SleepMultiplier));
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
}

// ---------------------------------- //
// Stop turn end sequence
+++EndTurnUIStop+++
SM::UnspawnAllPlayers();
UIManager.UIAll.StatusMessage = "";
UIManager.UIAll.BigMessage = "";

// ---------------------------------- //
// Select the next atk slot
G_AtkSlot[G_AtkClan] += 1;
if (G_AtkSlot[G_AtkClan] > C_RequiredPlayersNb) G_AtkSlot[G_AtkClan] = 1;
// ---------------------------------- //
// Team exchange role for the next turn
G_AtkClan = G_DefClan;
G_DefClan = 3 - G_AtkClan;
***

// ---------------------------------- //
// Round end
// ---------------------------------- //
***EndRound***
***
// ---------------------------------- //
// Skip the round end sequence if a vote passed
if (MatchEndRequested) break;
***

// ---------------------------------- //
// Map end
// ---------------------------------- //
***EndMap***
***
---StopUsingToken---
// Override the first atk clan if a #Command was voted before the end of the map
if (G_Override_FirstAtkClan == 1 || G_Override_FirstAtkClan == 2) {
	FirstAtk = G_Override_FirstAtkClan;
	if (MB_SectionTurnNb % 2 == 0) {
		G_AtkClan = 3 - G_Override_FirstAtkClan;
		G_DefClan = G_Override_FirstAtkClan;
	} else {
		G_AtkClan = G_Override_FirstAtkClan;
		G_DefClan = 3 - G_Override_FirstAtkClan;
	}
	G_Override_FirstAtkClan = -1;
}

declare HeaderClanScores = Integer[Integer];
HeaderClanScores = [1 => G_MapScores[1], 2 => G_MapScores[2]];
if (MB_UseScriptCallbacks && S_UseLegacyCallback) {
	XmlRpc.SendCallback("EndMap", Json::Enfold(Json::Merge([
		Json::Stringify("MapNumber", MB_SectionMapNb),
		Json::Stringify("MapWinnerClan", WinnerMapClan),
		Json::Stringify("Clan1MapScore", HeaderClanScores[1]),
		Json::Stringify("Clan2MapScore", HeaderClanScores[2]),
		PlayersStringify("ScoresTable", 0)
	])));
}

// ---------------------------------- //
// Play map end sequence
//UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;

// ---------------------------------- //
// Give Ladder Points
---LadderPoints---

// ---------------------------------- //
// Find the Master
---FindMaster---

declare Text Message = "";
// ---------------------------------- //
// Display the winning message if there is one
if (WinnerMapClan != -1) {
	declare Message = "";
	if (WinnerMapClan == 3) {
		G_MapScores[1] += 1;
		G_MapScores[2] += 1;
		UIManager.UIAll.StatusMessage = _("Points limit reached.");
		Message = _("|Match|Draw");
	} else {
		G_MapScores[WinnerMapClan] += 1;
		declare WinnerTeamName = Teams[WinnerMapClan - 1].ColorizedName;
		Message = TextLib::Compose(_("$<%1$> wins the map!"), WinnerTeamName);
		if (WinByForfeit) UIManager.UIAll.StatusMessage = _("Win by forfeit.");
		MB_Log("""Clan {{{WinnerMapClan}}} wins the Map {{{G_MapScores[1]}}}-{{{G_MapScores[2]}}}""");
	}
	
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
	UIManager.UIAll.BigMessageSoundVariant = 0;
	UIManager.UIAll.BigMessage = Message;
	if (UIManager.UIAll.StatusMessage == "")
		UIManager.UIAll.StatusMessage = "$<"^Teams[0].ColorizedName^"$> "^Clan1Score^" - "^Clan2Score^" $<"^Teams[1].ColorizedName^"$>";
	UpdateHeader();
	Elite_Sleep(MathLib::NearestInteger(500*SleepMultiplier));
	+++EndSequenceStart+++
	Elite_Sleep(MathLib::NearestInteger(1500*SleepMultiplier));
	UpdateLayerScoresTable(C_SequencePodium);
	Elite_Sleep(MathLib::NearestInteger(6000*SleepMultiplier));
}
UIManager.UIAll.StatusMessage = "";
UIManager.UIAll.BigMessage = "";
Message = "";

// ---------------------------------- //
// Cancel the result of the map if it was skipped
if (MatchEndRequested) {
	+++EndSequenceEnd+++
	
	FirstAtk = G_AtkClan;
	VoteClanNb = 3 - VoteClanNb;
	
	// Ignore points on this map for goal average
	G_MatchAtkPoints[1] -= G_MapAtkPoints[1];
	G_MatchAtkPoints[2] -= G_MapAtkPoints[2];
	G_MatchDefElim[1] -= G_MapDefElim[1];
	G_MatchDefElim[2] -= G_MapDefElim[2];
	G_MatchBestCaptureTime[1] -= G_MapBestCaptureTime[1];
	G_MatchBestCaptureTime[2] -= G_MapBestCaptureTime[2];
	G_MatchPoints[1] -= Clan1Score;
	G_MatchPoints[2] -= Clan2Score;
	
	MB_SectionMapNb -= 1;
	
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
	UIManager.UIAll.StatusMessage = "";
	UIManager.UIAll.BigMessage = _("Map skipped, going to the next.");
	Elite_Sleep(1500);
	MatchmakingWait();
	UIManager.UIAll.BigMessage = "";
	Mode::UnloadMap();
	
	continue;
}

// ---------------------------------- //
// Find the team who won the match

// ---------------------------------- //
// Draw
if (G_MapScores[1] == G_MapScores[2] && G_MapScores[1] >= S_MapWin) {
	Message = _("|Match|Draw");
	MB_Log("""Draw Match {{{G_MapScores[1]}}}-{{{G_MapScores[2]}}}""");
	WinnerMatchClan = 0;
	MB_StopMatch = True;
}
// ---------------------------------- //
// Clan 1 wins with best score
else if (G_MapScores[1] >= S_MapWin) {
	Message = TextLib::Compose(_("$<%1$> wins the match!"), Teams[0].ColorizedName);
	MB_Log("""Clan 1 wins the Match {{{G_MapScores[1]}}}-{{{G_MapScores[2]}}}""");
	WinnerMatchClan = 1;
	MB_StopMatch = True;
} 
// ---------------------------------- //
// Clan 2 wins with best score
else if (G_MapScores[2] >= S_MapWin) {
	Message = TextLib::Compose(_("$<%1$> wins the match!"), Teams[1].ColorizedName);
	MB_Log("""Clan 2 wins the Match {{{G_MapScores[1]}}}-{{{G_MapScores[2]}}}""");
	WinnerMatchClan = 2;
	MB_StopMatch = True;
} 
// ---------------------------------- //
// No one wins, continue the match
else {
	MB_StopMatch = False;
}

// ---------------------------------- //
// Display the winning message if there is one
if(Message != "") {
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
	UIManager.UIAll.BigMessageSoundVariant = 0;
	UIManager.UIAll.BigMessage = Message;
	UIManager.UIAll.StatusMessage = "$<"^Teams[0].ColorizedName^"$> "^G_MapScores[1]^" - "^G_MapScores[2]^" $<"^Teams[1].ColorizedName^"$>";
	UpdateHeader();
	//UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	Elite_Sleep(MathLib::NearestInteger(3000*SleepMultiplier));
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
	Elite_Sleep(MathLib::NearestInteger(8000*SleepMultiplier));
}

MatchmakingWait();
+++EndSequenceEnd+++

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.StatusMessage = "";
UIManager.UIAll.BigMessage = "";
***

// ---------------------------------- //
// Match end
// ---------------------------------- //
***EndMatch***
***
declare HeaderClanScores = Integer[Integer];
HeaderClanScores = [1 => G_MapScores[1], 2 => G_MapScores[2]];
if (MB_UseScriptCallbacks && S_UseLegacyCallback) {
	XmlRpc.SendCallback("EndMatch", Json::Enfold(Json::Merge([
		Json::Stringify("MatchNumber", MB_SectionMatchNb),
		Json::Stringify("MatchWinnerClan", WinnerMatchClan),
		Json::Stringify("Clan1MapScore", HeaderClanScores[1]),
		Json::Stringify("Clan2MapScore", HeaderClanScores[2])
	])));
}
***

***EndServer***
***
WarmUp2::Unload();
// Destroy Layers
LayerDestroyed = Layers::Destroy("ScoresTable");
LayerDestroyed = Layers::Destroy("SpawnScreenAttack");
LayerDestroyed = Layers::Destroy("SpawnScreenDefend");
Layers::Clean();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/// Check if the clublinks must be reloaded
Void ForceClublinkReload() {
	if (!G_Override_ForceClublinkReload) return;
	G_Override_ForceClublinkReload = False;
	
	Clublink::ResetAll();
	Clublink::DefineTeamAuto(True);
}

// ---------------------------------- //
/// Get the right point limit for the map
Integer GetPointLimit() {
	// Decider map point limit
	if (G_MapScores[1] == S_MapWin - 1 && G_MapScores[2] == S_MapWin - 1) return S_DeciderTurnLimit;
	// Standard point limit
	return S_TurnLimit;
}

// ---------------------------------- //
/// Initialize the color of the spawns, poles and other colored elements
Void InitBasesColor() {
	foreach (Base in Bases) {
		Base.Clan = G_DefClan;
		Base.IsActive = True;
	}
	
	// Get def and atk spawn
	declare DefBlockSpawn <=> SM::GetSpawn("SpawnDefense", 0);
	declare AtkBlockSpawn <=> SM::GetSpawn("SpawnAttack", 0);
	
	// Color the bases
	if (DefBlockSpawn.Base != AtkBlockSpawn.Base && DefBlockSpawn.Base != Null && AtkBlockSpawn.Base != Null) {
		AtkBlockSpawn.Base.Clan = G_AtkClan;
		AtkBlockSpawn.Base.IsActive = True;
	}
}

// ---------------------------------- //
/// Save all the scores locally on the server
Void SaveScores() {
	
}

// ---------------------------------- //
/// Restore all the scores from the previous save
Void RestoreScores() {
	
}

// ---------------------------------- //
/** Spawns all the players.
 * 
 * @param _Phase		0 playing time, 1 warmup KotM, 2 warmup classic/free, 3 waiting time 
 */
Void SpawnThemAll(Integer _Phase) {
	// Get def and atk spawn
	declare DefBlockSpawn <=> SM::GetSpawn("SpawnDefense", 0);
	declare AtkBlockSpawn <=> SM::GetSpawn("SpawnAttack", 0);
	
	// WarmUp classic/free || Waiting time
	if (_Phase == 2 || _Phase == 3) {
		foreach (Player in Players) {	
			declare WarmUpSide for Player = True;
			if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) continue;
			
			SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_WURocketAmmoMax);
			SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, C_WULaserAmmoMax);
			SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, C_WUNucleusAmmoMax);
			Player.ArmorMax	= C_AtkArmorMax;
			if (WarmUpSide) {
				Player.AmmoGain	= 1. * C_WULaserAmmoGain;
				Player.StaminaMax = 1.;
				Player.StaminaGain = 1.;
				
				SetPlayerWeapon(Player, CSmMode::EWeapon::Laser, False);
				SM::SpawnPlayer(Player, Player.RequestedClan, Player.ArmorMax, AtkBlockSpawn, Now);
				SetPlayerAmmo(Player, CSmMode::EWeapon::Nucleus, C_WUNucleusAmmoMax);
			} else {
				Player.AmmoGain	= 1. * C_WURocketAmmoGain;
				Player.StaminaMax = 1. * C_DefStaminaMaxMultiplier;
				Player.StaminaGain = 1. * C_DefStaminaMaxMultiplier;
				SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, True); 
				SM::SpawnPlayer(Player, Player.RequestedClan, Player.ArmorMax, DefBlockSpawn, Now);
				SetPlayerAmmo(Player, CSmMode::EWeapon::Nucleus, C_WUNucleusAmmoMax);
			}
			Player.IsHighlighted = True;
			WarmUpSide = !WarmUpSide;
		}
	} 
	// Playing time
	else {
		declare MaxDef = C_RequiredPlayersNb;
		declare MaxAtk = 1;
		
		declare DefSpawned = 0;
		declare AtkSpawned = 0;
		
		declare OrderDef = Ident[Integer];
		declare OrderAtk = Ident[Integer];
		if (G_AtkClan == 1) {
			OrderDef = WarmUp2::GetGroup("Clan2");
			OrderAtk = WarmUp2::GetGroup("Clan1");
		} else if (G_AtkClan == 2) {
			OrderDef = WarmUp2::GetGroup("Clan1");
			OrderAtk = WarmUp2::GetGroup("Clan2");
		}
		
		// Spawn defenders
		foreach (Slot => PlayerId in OrderDef) {
			---SpawnDef---
		}
		
		// Spawn attackers
		foreach (Slot => PlayerId in OrderAtk) {
			---SpawnAtk---
		}
	} 	
	
	InitBasesColor();
}

// ---------------------------------- //
/** Update the given clan score.
 *
 * @param iClan  the clan the games needs to upgrade the score.
 * @param iPlus	 how many points the Clan gets.
 */
Void UpgradeScore(Integer _iClan, Integer _iPlus) {
	if (_iClan == 1) {
		Clan1Score += _iPlus;
		G_MatchPoints[1] += _iPlus;
		if (_iClan == G_AtkClan) {
			G_MatchAtkPoints[1] += 1;
			G_MapAtkPoints[1] += 1;
			if (Players.existskey(G_AtkPlayerId)) {
				Score::AddPoints(Players[G_AtkPlayerId], 1);
				declare netwrite Net_LayerST_AtkPoints for Players[G_AtkPlayerId] = 0;
				Net_LayerST_AtkPoints += 1;
			}
		}
	} else {
		Clan2Score += _iPlus;
		G_MatchPoints[2] += _iPlus;
		if (_iClan == G_AtkClan) {
			G_MatchAtkPoints[2] += 1;
			G_MapAtkPoints[2] += 1;
			if (Players.existskey(G_AtkPlayerId)) {
				Score::AddPoints(Players[G_AtkPlayerId], 1);
				declare netwrite Net_LayerST_AtkPoints for Players[G_AtkPlayerId] = 0;
				Net_LayerST_AtkPoints += 1;
			}
		}
	}
}

// ---------------------------------- //
/**	Get the clan with the best goal average since the beginning of the match
 *
 *	@return		1 for clan 1, 2 for clan 2, 3 for draw
 */
Integer GetGoalAverageBestClan() {
	// Most points
	if (G_MatchPoints[1] != G_MatchPoints[2]) {
		MB_Log("Goal average - Most Points - "^Teams[0].Name^" "^G_MatchPoints[1]^" - "^G_MatchPoints[2]^" "^Teams[1].Name);
		if (G_MatchPoints[1] > G_MatchPoints[2]) return 1;
		else return 2;
	}
	// Most def elimination
	else if (G_TieBreakDefElim[1] != G_TieBreakDefElim[2]) {
		MB_Log("Goal average - Most defenders elimination - "^Teams[0].Name^" "^G_TieBreakDefElim[1]^" - "^G_TieBreakDefElim[2]^" "^Teams[1].Name);
		if (G_TieBreakDefElim[1] > G_TieBreakDefElim[2]) return 1;
		else return 2;
	}
	
	return 3;
}

// ---------------------------------- //
/** Play a sound
 *
 * @param _Sound	The sound to play
 * @param _Variant	The variant to play
 */
Void PlaySound(CUIConfig::EUISound _Sound, Integer _Variant) {
	UIManager.UIAll.SendNotice("", CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, _Sound, _Variant);
}

// ---------------------------------- //
/** Get the overview camera direction.
 *
 * @return	The direction of the camera
 */
Vec3 GetOverviewCamDirection() {
	declare FirstGoal <=> CSmBlockPole;
	foreach (Goal in BlockPoles) {
		if (Goal.Tag == "Goal A") {
			FirstGoal <=> Goal;
			break;
		}
	}
	
	// Compatibility with old MapType
	if (FirstGoal == Null) FirstGoal <=> SM::GetPole("Goal", 0);
	if (FirstGoal == Null) { declare Vec3 NoPosition; return NoPosition; }
	
	declare AtkBlockSpawn <=> SM::GetSpawn("SpawnAttack", 0);
	return AtkBlockSpawn.Position - FirstGoal.Position;
}

// ---------------------------------- //
/** Helper for the DisplayHitFunction
 *
 * @param	_Player		The player who'll receive the notice
 * @param	_Message	The message for the notice
 */
Void NoticeHitDistance(CSmPlayer _Player, Text _Message) {
	declare UI <=> UIManager.GetUI(_Player);
	Message::SendBigMessage(_Player, _Message, 2000, 2);
}

// ---------------------------------- //
/** Display the distance between the shooter and the victim
 *
 *	@param	_Shooter		The shooter
 *	@param	_Victim			The Victim
 *	@param	_ShooterOnly	Display the distance hit message to the shooter only
 */
Void DisplayHitDistance(CSmPlayer _Shooter, CSmPlayer _Victim, Boolean _ShooterOnly) {
	if (_Shooter == Null || _Victim == Null) return;
	
	declare Distance = MathLib::Distance(_Shooter.Position, _Victim.Position);
	Distance = MathLib::NearestInteger(Distance*10.0)/10.0;
	declare DistanceMessage = TextLib::Compose(_("%1m hit!"), TextLib::SubString(TextLib::ToText(Distance), 0, 5));
	if (_ShooterOnly) {
		NoticeHitDistance(_Shooter, DistanceMessage);
	} else {
		foreach (Player in Players) {
			if (Player.CurrentClan == G_AtkClan) {
				NoticeHitDistance(Player, DistanceMessage);
			}
		}
		foreach (Spectator in Spectators) {
			NoticeHitDistance(Spectator, DistanceMessage);
		}
		if (Distance > G_LongestRailDistance) {
			G_LongestRailName = _Shooter.Name;
			G_LongestRailDistance = Distance;
		}
	}
}

// ---------------------------------- //
/** Get the objective manialink string.
 * 
 * @param _Objective		The objective to show on the spawwn screen
 *
 * @return		The manialink string
 */
Text UpdateLayerSpawnScreen(Text _Objective) {
	declare Text Objective = TextLib::MLEncode(_Objective);
	
	return """
<frame posn="0 55 0" id="FrameObjective">
	<quad posn="0 0 1" sizen="120 16" halign="center" valign="center" style="Bgs1InRace" substyle="BgList" />
	<label posn="0 2 2" sizen="116 14" halign="center" scale="3" valign="center" text="{{{ Objective }}}"/>
</frame>
	""";
}

// ---------------------------------- //
/** Generate players list for the score table
 *
 *	@param	_Mode	The mode creating the list: 1 = Elite, 2 = Heroes
 *	@param	_Nb		Number of players in the list
 *	@param	_Scale	Width scale
 *
 *	@return	The players list Text
 */
Text CreatePlayersListBig(Integer _Mode, Integer _Nb, Real _Scale) {
	---CreatePlayersListBig---
}

// ---------------------------------- //
/** Create the score table manialink string.
 * 
 * @return		The manialink string
 */
Text CreateLayerScoresTable() {
	---CreateLayerScoresTable---
}

// ---------------------------------- //
/** Update the score table manialink string.
 *
 *	@param	_Mode	Type of display for the scores table (warm-up, playing, ...)
 * 
 *	@return		The manialink string
 */
Void UpdateLayerScoresTable(Integer _Mode) {
	---UpdateLayerScoresTable---
}

// ---------------------------------- //
/// Update the score summary header.
Void UpdateHeader() {
	declare CSmPlayer Player1 <=> Null;
	declare CSmPlayer Player2 <=> Null;
	declare HeaderClanScores = Integer[Integer];
	
	HeaderClanScores = [1 => G_MapScores[1], 2 => G_MapScores[2]];

	// Find a captain for each clan
	foreach (Player in Players) {
		if (Player.CurrentClan == 1) {
			Player1 <=> Player;
		} else if (Player.CurrentClan == 2) {
			Player2 <=> Player;
		}
	}
	
	UIManager.UIAll.OverlayScoreSummary = True;
	if (Player1 != Null) {
		UIManager.UIAll.ScoreSummary_Player1 = Player1.Id;
		UIManager.UIAll.ScoreSummary_Points1 = Clan1Score;
		UIManager.UIAll.ScoreSummary_MatchPoints1 = HeaderClanScores[1];
	} else {
		UIManager.UIAll.ScoreSummary_Player1 = NullId;
		UIManager.UIAll.ScoreSummary_Points1 = 0;
		UIManager.UIAll.ScoreSummary_MatchPoints1 = 0;
	}

	if (Player2 != Null) {
		UIManager.UIAll.ScoreSummary_Player2 = Player2.Id;
		UIManager.UIAll.ScoreSummary_Points2 = Clan2Score;
		UIManager.UIAll.ScoreSummary_MatchPoints2 = HeaderClanScores[2];
	} else {
		UIManager.UIAll.ScoreSummary_Player2 = NullId;
		UIManager.UIAll.ScoreSummary_Points2 = 0;
		UIManager.UIAll.ScoreSummary_MatchPoints2 = 0;
	}
	
	declare netwrite Clan1MapPoints for XmlRpc = 0;
	declare netwrite Clan1MatchPoints for XmlRpc = 0;
	declare netwrite Clan2MapPoints for XmlRpc = 0;
	declare netwrite Clan2MatchPoints for XmlRpc = 0;
	Clan1MapPoints = Clan1Score;
	Clan1MatchPoints = HeaderClanScores[1];
	Clan2MapPoints = Clan2Score;
	Clan2MatchPoints = HeaderClanScores[2];
}

// ---------------------------------- //
/// Init the UI state.
Void InitUi() {
	SM::SetupDefaultVisibility();
	UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::Always;
	UIManager.UIAll.TeamLabelsShowGauges = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.TeamLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
	UIManager.UIAll.ScoreTableOnlyManialink = True;
	UpdateHeader();
}

// ---------------------------------- //
/** Update the spectators
 *
 *	@param	_Forced		Force the update
 */
Void UpdateSpectators(Boolean _Forced) {
	if (!_Forced && G_LastSpecUpdate + C_SpecRefreshInterval > Now) return;
	G_LastSpecUpdate = Now;
	UIManager.UIAll.SpectatorCamAutoLongitude = MathLib::Atan2(-G_MapSpecCamDirection.X, -G_MapSpecCamDirection.Z);
	UIManager.UIAll.SpectatorCamAutoLatitude = 0.5;
	
	UIManager.UIAll.SpectatorAutoTarget = G_AtkPlayerId;
	
	declare SpecDefId = NullId;
	foreach (Player in Players) {
		if (Player.CurrentClan == G_DefClan && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
			SpecDefId = Player.Id;
		}
	}
	
	foreach (Player in Players) {		
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;
		
		// Can select defender to spec
		if (Player.CurrentClan != 0) {
			UI.SpectatorForceCameraType = 1;
			UI.SpectatorForcedClan = Player.CurrentClan;
		} else if (Player.RequestedClan != 0) {
			UI.SpectatorForceCameraType = 1;
			UI.SpectatorForcedClan = Player.RequestedClan;
		} else {
			UI.SpectatorForceCameraType = -1;
			UI.SpectatorForcedClan = -1;
		}
	}
}
Void UpdateSpectators() {
	UpdateSpectators(False);
}

// ---------------------------------- //
/// Check if we are in TieBreak
Void CheckTieBreak() {
	/*if (Clan1Score + Clan2Score >= GetPointLimit() * 2) {
		G_TieBreak = True;
	} else {
		G_TieBreak = False;
	}*/
	G_TieBreak = False;
}

// ---------------------------------- //
/// Manage #Command
Void ManageCommand() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CSmModeEvent::EType::OnCommand) {
			switch (Event.CommandName) {
				// ---------------------------------- //
				case "Command_MatchPointsClan1": {
					if (Event.CommandValueInteger < 0) G_MapScores[1] = 0;
					else G_MapScores[1] = Event.CommandValueInteger;
					MB_SectionMapNb = G_MapScores[1] + G_MapScores[2] + 1;
					
					UpdateHeader();
					CheckTieBreak();
				}
				// ---------------------------------- //
				case "Command_MatchPointsClan2": {
					if (Event.CommandValueInteger < 0) G_MapScores[2] = 0;
					else G_MapScores[2] = Event.CommandValueInteger;
					MB_SectionMapNb = G_MapScores[1] + G_MapScores[2] + 1;
					
					UpdateHeader();
					CheckTieBreak();
				}
				// ---------------------------------- //
				case "Command_CurrentMapPointsClan1": {
					G_MatchPoints[1] -= Clan1Score;
					if (Event.CommandValueInteger < 0) Clan1Score = 0;
					else Clan1Score = Event.CommandValueInteger;
					G_MatchPoints[1] += Clan1Score;
					MB_SectionTurnNb = Clan1Score + Clan2Score + 1;
					
					if (MB_CurrentSection == "WarmUp") UpdateLayerScoresTable(C_SequenceWarmUp);
					else UpdateLayerScoresTable(C_SequencePlaying);
					UpdateHeader();
					CheckTieBreak();
				}
				// ---------------------------------- //
				case "Command_CurrentMapPointsClan2": {
					G_MatchPoints[2] -= Clan2Score;
					if (Event.CommandValueInteger < 0) Clan2Score = 0;
					else Clan2Score = Event.CommandValueInteger;
					G_MatchPoints[2] += Clan2Score;
					MB_SectionTurnNb = Clan1Score + Clan2Score + 1;
					
					if (MB_CurrentSection == "WarmUp") UpdateLayerScoresTable(C_SequenceWarmUp);
					else UpdateLayerScoresTable(C_SequencePlaying);
					UpdateHeader();
					CheckTieBreak();
				}
				// ---------------------------------- //
				case "Command_PreviousMapsPointsClan1": {
					if (Event.CommandValueInteger < 0) G_MatchPoints[1] = 0;
					else G_MatchPoints[1] = Event.CommandValueInteger;
					G_MatchPoints[1] += Clan1Score;
					
					if (MB_CurrentSection == "WarmUp") UpdateLayerScoresTable(C_SequenceWarmUp);
					else UpdateLayerScoresTable(C_SequencePlaying);
				}
				// ---------------------------------- //
				case "Command_PreviousMapsPointsClan2": {
					if (Event.CommandValueInteger < 0) G_MatchPoints[2] = 0;
					else G_MatchPoints[2] = Event.CommandValueInteger;
					G_MatchPoints[2] += Clan2Score;
					
					if (MB_CurrentSection == "WarmUp") UpdateLayerScoresTable(C_SequenceWarmUp);
					else UpdateLayerScoresTable(C_SequencePlaying);
				}
				// ---------------------------------- //
				case "Command_TieBreakDefElimClan1": {
					if (Event.CommandValueInteger < 0) G_TieBreakDefElim[1] = 0;
					else G_TieBreakDefElim[1] = Event.CommandValueInteger;
					
					if (MB_CurrentSection == "WarmUp") UpdateLayerScoresTable(C_SequenceWarmUp);
					else UpdateLayerScoresTable(C_SequencePlaying);
				}
				// ---------------------------------- //
				case "Command_TieBreakDefElimClan2": {
					if (Event.CommandValueInteger < 0) G_TieBreakDefElim[2] = 0;
					else G_TieBreakDefElim[2] = Event.CommandValueInteger;
					
					if (MB_CurrentSection == "WarmUp") UpdateLayerScoresTable(C_SequenceWarmUp);
					else UpdateLayerScoresTable(C_SequencePlaying);
				}
				// ---------------------------------- //
				case "Command_ForceFirstAtkClan": {
					if (Event.CommandValueInteger == 1 || Event.CommandValueInteger == 2) G_Override_FirstAtkClan = Event.CommandValueInteger;
				}
				// ---------------------------------- //
				case "Command_ForceTossWinner": {
					if (Event.CommandValueInteger == 1 || Event.CommandValueInteger == 2) G_Override_TossWinner = Event.CommandValueInteger;
				}
				// ---------------------------------- //
				case "Command_ForceWarmUp": {
					if (Event.CommandValueBoolean) {
						G_Override_NeedWarmUp = True;
					}
				}
				// ---------------------------------- //
				case "Command_ForceClublinkReload": {
					if (Event.CommandValueBoolean) {
						G_Override_ForceClublinkReload = True;
					}
				}
			}
		}
	}
}

// ---------------------------------- //
/** Custom sleep function for Elite
 *
 *	@param	_Duration	The time to spend sleeping in ms
 */
Void Elite_Sleep(Integer _Duration) {
	declare End = Now + _Duration;
	while(Now < End) {
		MB_Yield();
		ManageCommand();
		ForceClublinkReload();
	}
}

// ---------------------------------- //
/// End map timer for MatchMaking
Void MatchmakingWait() {
	declare PrevMatchmakingSleep = S_MatchmakingSleep;
	StartTime = Now;
	if (S_MatchmakingSleep > 0) UIManager.UIAll.CountdownEndTime = Now + (S_MatchmakingSleep * 1000);
	else UIManager.UIAll.CountdownEndTime = -1;
	while (S_MatchmakingSleep < 0 || UIManager.UIAll.CountdownEndTime > Now) {
		if (PrevMatchmakingSleep != S_MatchmakingSleep) {
			PrevMatchmakingSleep = S_MatchmakingSleep;
			if (S_MatchmakingSleep > 0) UIManager.UIAll.CountdownEndTime = Now + (S_MatchmakingSleep * 1000);
			else UIManager.UIAll.CountdownEndTime = -1;
		}
		MB_Yield();
		ManageCommand();
		ForceClublinkReload();
	}
	StartTime = -1;
	UIManager.UIAll.CountdownEndTime = -1;
}

// ---------------------------------- //
/** Create the wait connection manialink
 *
 *	@return		The manialink
 */
Text CreateLayerWaitConnection() {
	declare Integer TotalReqPlayers	= C_RequiredPlayersNb*2;
	declare Text 	ImgPlayer		= "file://Media/Manialinks/Shootmania/Common/DefendersLeft.dds";
	declare Real	ImgSize			= 8.;
	declare Real	XMargin			= 1.;
	declare Text	MLText = 
"""
<frame posn="155 -79" id="Frame_Waiting">
	<label halign="right" valign="bottom" textsize="3" textemboss="1" id="Label_Waiting" />
	<frame>
	""";
	
	for(I, 0, TotalReqPlayers-1) {
		MLText ^= """ 
		<quad id="Quad_Player{{{I}}}" halign="center" valign="center" posn="{{{(-I*(ImgSize + XMargin)) - (ImgSize/2.)}}} {{{-ImgSize/2.}}}" image="{{{ImgPlayer}}}" sizen="{{{ImgSize}}} {{{ImgSize}}}"  colorize="777" scale="0.5" />""";
	}
	
	MLText ^= """
	</frame>
</frame>
<frame posn="155 -86" hidden="1" id="Frame_Ready">
	<label halign="right" valign="bottom" textsize="3" textemboss="1" text="{{{_("The match will begin shortly ...")}}}" />
</frame>
<script><!--
#Include "TextLib" as TL

main() {
	declare Label_Waiting <=> (Page.GetFirstChild("Label_Waiting") as CMlLabel);
	declare Frame_Waiting <=> (Page.GetFirstChild("Frame_Waiting") as CMlFrame);
	declare Frame_Ready <=> (Page.GetFirstChild("Frame_Ready") as CMlFrame);
	
	declare CMlQuad[] PlayersQuad;
	declare Boolean GetAQuad = True;
	declare Integer I = 0;
	while(GetAQuad) {
		declare Quad_Player <=> (Page.GetFirstChild("Quad_Player"^I) as CMlQuad);
		if(Quad_Player != Null) {
			PlayersQuad.add(Quad_Player);
			I += 1;
		} else {
			GetAQuad = False;
		}
	}
	
	Label_Waiting.SetText(_("Waiting for players"));
	
	declare netread Integer Net_ModeSport_PlayersNbTotal for Teams[0];
	declare PrevPlayersNbTotal = -1;
	
	while (True) {
		yield;
		if (InputPlayer == Null) continue;
		if (!PageIsVisible) continue;
		
		if (PrevPlayersNbTotal != Net_ModeSport_PlayersNbTotal) {
			PrevPlayersNbTotal = Net_ModeSport_PlayersNbTotal;
			//Label_Waiting.SetText(TL::Compose("%1: %2/{{{TotalReqPlayers}}}", _("Waiting for players"), TL::ToText(Net_ModeSport_PlayersNbTotal)));
			
			for(IQuad, 0, PlayersQuad.count - 1) {
				if(IQuad < Net_ModeSport_PlayersNbTotal) {
					declare PlayerQuad = PlayersQuad[PlayersQuad.count - IQuad - 1];
					if(PlayerQuad != Null) {
						PlayerQuad.Colorize = <1., 1., 1.>;
						PlayerQuad.Scale = 1.;
					}
				} else {
					declare PlayerQuad = PlayersQuad[PlayersQuad.count - IQuad - 1];
					if(PlayerQuad != Null) {
						PlayerQuad.Colorize = <0.5, 0.5, 0.5>;
						PlayerQuad.Scale = 0.5;
					}
				}
			}
			
			if (Net_ModeSport_PlayersNbTotal > 0 && Net_ModeSport_PlayersNbTotal >= {{{TotalReqPlayers}}}) {
				PlayUiSound(::EUISound::Custom4, 1, 0.75);
			} else {
				PlayUiSound(::EUISound::Custom4, 0, 0.75);
			}
		}
		
		if (!Frame_Waiting.Visible && PrevPlayersNbTotal < {{{TotalReqPlayers}}}) {
			Frame_Waiting.Show();
			Frame_Ready.Hide();
		} else if (!Frame_Ready.Visible &&  PrevPlayersNbTotal >= {{{TotalReqPlayers}}}) {
			Frame_Waiting.Hide();
			Frame_Ready.Show();
		}
	}
}
--></script>
""";

	return MLText;
}

// ---------------------------------- //
/// Wait player connection
Void WaitConnection() {
	WarmUp2::Begin();
	WarmUp2::Detach();
	
	declare TimeOut = 5000;
	declare PrevClansNbPlayers = [1 => 0, 2 => 0];
	StartTime = Now;
	UIManager.UIAll.CountdownEndTime = -1;
	
	declare netwrite Integer Net_ModeSport_PlayersNbTotal for Teams[0];
	declare LayerWaitConnectionId = Layers::Create("WaitConnection", CreateLayerWaitConnection());
	Layers::GetFromId(LayerWaitConnectionId).Type = CUILayer::EUILayerType::CutScene;
	declare LayerAttached = Layers::Attach("WaitConnection", NullId);
	UIManager.UIAll.UISequence_CanSkipIntroMT = False;
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::RollingBackgroundIntro;
	
	Net_ModeSport_PlayersNbTotal = 0;
	
	while (True && !ServerShutdownRequested && !MatchEndRequested) {
		foreach (Player in AllPlayers) {
			if (Player.CurrentClan != Player.RequestedClan) {
				SetPlayerClan(Player, Player.RequestedClan);
				if (Player.CurrentClan == 1) WarmUp2::SetPlayerGroup(Player, "Clan1");
				else if (Player.CurrentClan == 2) WarmUp2::SetPlayerGroup(Player, "Clan2");
			}
		}
		
		if (Net_ModeSport_PlayersNbTotal != PlayersNbTotal) {
			Net_ModeSport_PlayersNbTotal = PlayersNbTotal;
		}
		
		if (PrevClansNbPlayers[1] != ClansNbPlayers[1] || PrevClansNbPlayers[2] != ClansNbPlayers[2]) {
			PrevClansNbPlayers[1] = ClansNbPlayers[1];
			PrevClansNbPlayers[2] = ClansNbPlayers[2];
			WarmUp2::Clean();
			WarmUp2::Fill();
			UpdateLayerScoresTable(C_SequenceWarmUp);
		}
		
		if (UIManager.UIAll.CountdownEndTime == -1 && ClansNbPlayers[1] >= 1 && ClansNbPlayers[2] >= 1) {
			UIManager.UIAll.CountdownEndTime = Now + C_WaitConnectionTimeLimit + TimeOut;
		}
		
		if (ClansNbPlayers[1] >= C_RequiredPlayersNb && ClansNbPlayers[2] >= C_RequiredPlayersNb) break;
		if (UIManager.UIAll.CountdownEndTime != -1 && Now >= UIManager.UIAll.CountdownEndTime - TimeOut) break;
		Elite_Sleep(1000);
	}
	
	
	// ---------------------------------- //
	// Sort players by ladder points
	declare PlayersSort = [1 => Real[Ident], 2 => Real[Ident]];
	foreach (Player in Players) {
		SetPlayerClan(Player, Player.RequestedClan);
		if (!PlayersSort.existskey(Player.CurrentClan)) continue;
		PlayersSort[Player.CurrentClan][Player.Id] = -Player.User.LadderPoints;
	}
	
	PlayersSort[1] = PlayersSort[1].sort();
	PlayersSort[2] = PlayersSort[2].sort();
	
	for (I, 1, 2) {
		declare J = 0;
		declare Clan = "";
		if (I == 1) Clan = "Clan1";
		else Clan = "Clan2";
		
		foreach (PlayerId => Sorting in PlayersSort[I]) {
			if (!Players.existskey(PlayerId)) continue;
			J += 1;
			WarmUp2::SetPlayerGroup(Players[PlayerId], Clan);
			WarmUp2::SetPlayerSlot(Players[PlayerId], J, True);
		}
	}
	
	WarmUp2::Clean();
	WarmUp2::Fill();
	UpdateLayerScoresTable(C_SequenceWarmUp);
	
	// ---------------------------------- //
	// Check if the players are all allies
	declare AllPlayersAreAllies = [1 => False, 2 => False];
	declare ClansOrders = [1 => WarmUp2::GetGroup("Clan1"), 2 => WarmUp2::GetGroup("Clan2")];
	for (I, 1, 2) {
		declare J = 1;
		declare AlliesNb = 0;
		declare TestedNb = 0;
		foreach (Slot => Id in ClansOrders[I]) {
			if (Players.existskey(Id)) {
				TestedNb += 1;
				declare Player <=> Players[Id];
				for (K, J+1, C_RequiredPlayersNb) {
					if (ClansOrders.existskey(I) && Players.existskey(ClansOrders[I][K])) {
						declare Player2 <=> Players[ClansOrders[I][K]];
						if (Users_AreAllies(Player.User, Player2.User)) AlliesNb += 1;
					}
				}
			}
			J += 1;
		}
		declare MinimumAllies = (((TestedNb - 1) * TestedNb) / 2);
		if (AlliesNb >= MinimumAllies) AllPlayersAreAllies[I] = True;
	}
	
	declare MatchmakingSetOrderParam2 = "";
	XmlRpc.SendCallback("MatchmakingGetOrder", "");
	
	// ---------------------------------- //
	// Let the players select their orders if they are all allies
	if (AllPlayersAreAllies[1] || AllPlayersAreAllies[2]) {
		UIManager.UIAll.CountdownEndTime = Now + TimeOut + 5000;
		
		if (!AllPlayersAreAllies[1]) WarmUp2::Disable("Clan1");
		if (!AllPlayersAreAllies[2]) WarmUp2::Disable("Clan2");
		
		WarmUp2::DisplayClanSelection(False);
		WarmUp2::Attach();
		
		while (Now < UIManager.UIAll.CountdownEndTime && !ServerShutdownRequested && !MatchEndRequested) {
			MB_Yield();
			ManageCommand();
			WarmUp2::Loop();
			ForceClublinkReload();
			
			if (WarmUp2::Updated()) UpdateLayerScoresTable(C_SequenceWarmUp);
			
			foreach (Event in XmlRpc.PendingEvents) {
				if (Event.Param1 == "MatchmakingSetOrder") MatchmakingSetOrderParam2 = Event.Param2;
				else if (Event.Param1 == "MatchmakingSetTempAllies") G_TempAllies = TextLib::Split(",", Event.Param2);
			}
		}
		
		WarmUp2::Detach();
		WarmUp2::Enable("Clan1");
		WarmUp2::Enable("Clan2");
	} else {
		UIManager.UIAll.CountdownEndTime = Now + TimeOut;
		
		while (Now < UIManager.UIAll.CountdownEndTime && !ServerShutdownRequested && !MatchEndRequested) {
			MB_Yield();
			ManageCommand();
			ForceClublinkReload();
			
			foreach (Event in XmlRpc.PendingEvents) {
				if (Event.Param1 == "MatchmakingSetOrder") MatchmakingSetOrderParam2 = Event.Param2;
				else if (Event.Param1 == "MatchmakingSetTempAllies") G_TempAllies = TextLib::Split(",", Event.Param2);
			}
		}
	}
	
	// ---------------------------------- //
	// Let the matchmaking server sort the players
	if (MatchmakingSetOrderParam2 != "") {
		UIManager.UIAll.CountdownEndTime = Now + TimeOut;
		PlayersSort[1].clear();
		PlayersSort[2].clear();
		
		declare MatchmakingOrders = TextLib::Split("|", MatchmakingSetOrderParam2);
		for (I, 0, 1) {
			if (!MatchmakingOrders.existskey(I)) continue;
			
			declare MatchmakingOrder = TextLib::Split(",", MatchmakingOrders[I]);
			declare J = 1.;
			foreach (Login in MatchmakingOrder) {
				foreach (Player in Players) {
					if (Player.Login == Login) {
						SetPlayerClan(Player, I+1);
						PlayersSort[I+1][Player.Id] = J;
						J += 1.;
						break;
					}
				}
			}
		}
		
		PlayersSort[1] = PlayersSort[1].sort();
		PlayersSort[2] = PlayersSort[2].sort();
		
		for (I, 1, 2) {
			declare J = 0;
			declare Clan = "";
			if (I == 1) Clan = "Clan1";
			else Clan = "Clan2";
			
			foreach (PlayerId => Sorting in PlayersSort[I]) {
				J += 1;
				if (!Players.existskey(PlayerId)) continue;
				WarmUp2::SetPlayerGroup(Players[PlayerId], Clan);
				WarmUp2::SetPlayerSlot(Players[PlayerId], J, True);
			}
		}
	}
	
	WarmUp2::End();
	WarmUp2::Clean();
	WarmUp2::Fill();
	
	declare LayerDetached = Layers::Detach("WaitConnection", NullId);
	declare LayerDestroyed = Layers::Destroy("WaitConnection");
	UpdateLayerScoresTable(C_SequenceWarmUp);
	Elite_Sleep(500);
	UIManager.UIAll.StatusMessage = "";
	UIManager.UIAll.BigMessage = "";
	
	StartTime = -1;
	UIManager.UIAll.CountdownEndTime = -1;
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	UIManager.UIAll.UISequence_CanSkipIntroMT = True;
	
	// ---------------------------------- //
	// Update the players clublinks
	if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
	else Clublink::DefineTeamFromUrl(S_ForceClublinkTeam1, S_ForceClublinkTeam2);
	Clublink::SyncUpdate();
	UpdateHeader();
	
	declare LayerUpdated = Layers::Update("ScoresTable", CreateLayerScoresTable());
}

// ---------------------------------- //
/// Warm up
Void WarmUp2() {
	XmlRpc::BeginWarmUp();
	+++StartWarmUp+++
	
	if (MB_UseScriptCallbacks && S_UseLegacyCallback) XmlRpc.SendCallback("BeginWarmup", Json::Enfold(Json::Stringify("AllReady", False)));
	
	// Shutdown the poles during warmup
	foreach (Goal in BlockPoles) {
		Goal.Gauge.Clan = 0;
		Goal.Gauge.Speed = 0;
		Goal.Gauge.Value = 0;
		Goal.Gauge.Max = 1000;
		Goal.Captured = False;
	}
	SM::UnspawnAllPlayers();
	
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::PhaseChange;
	UIManager.UIAll.BigMessageSoundVariant = 0;
	UIManager.UIAll.StatusMessage = _("Press F6 once you're ready.");
	if (G_Override_NeedWarmUp) UIManager.UIAll.BigMessage = TextLib::Compose("$f90%1", _("Pause"));
	else UIManager.UIAll.BigMessage = TextLib::Compose("$f90%1", _("Warm-up"));
	
	WarmUp2::Begin();
	
	// Init players
	foreach (Player in Players) {
		SetPlayerClan(Player, Player.RequestedClan);
		if (Player.CurrentClan == 1) WarmUp2::SetPlayerGroup(Player, "Clan1");
		else if (Player.CurrentClan == 2) WarmUp2::SetPlayerGroup(Player, "Clan2");
	}
	WarmUp2::Fill();
	
	StartTime = Now + 1000;
	EndTime = -1;
	declare TmpEndTime = EndTime;
	declare WarmUpDuration = S_WarmUpDuration;
	declare PrevWarmUpDuration = WarmUpDuration;
	
	while (!WarmUp2::Stop() && (EndTime <= 0 || Now < EndTime) && !ServerShutdownRequested && !MatchEndRequested) {
		MB_Yield();
		ManageCommand();
		ForceClublinkReload();
		
		// Check XmlRpc events
		declare StopWarmUp = False;
		foreach (Event in XmlRpc.PendingEvents) {
			if (Event.Param1 == "WarmUp_Extend") {
				declare ExtendTime = TextLib::ToInteger(Event.Param2);
				if (EndTime >= 0) {
					EndTime += ExtendTime;
					TmpEndTime += ExtendTime;
				}
				WarmUpDuration += ExtendTime;
			} else if (Event.Param1 == "WarmUp_Stop") {
				StopWarmUp = True;
			}
		}
		if (StopWarmUp) break;
		
		if (PrevWarmUpDuration != S_WarmUpDuration) {
			PrevWarmUpDuration = S_WarmUpDuration;			
			WarmUpDuration = S_WarmUpDuration;
			if (EndTime >= 0) {
				EndTime = Now + (WarmUpDuration * 1000);
				TmpEndTime = Now + (WarmUpDuration * 1000);
			}
		}
		
		// Let the server sleep if there's no players on it
		if (PlayersNbTotal <= 0) continue;
		
		foreach (Player in Players) {
			if (Player.CurrentClan != Player.RequestedClan) {
				UnspawnPlayer(Player);
				SetPlayerClan(Player, Player.RequestedClan);
				if (Player.CurrentClan == 1) WarmUp2::SetPlayerGroup(Player, "Clan1");
				else if (Player.CurrentClan == 2) WarmUp2::SetPlayerGroup(Player, "Clan2");
			}
		}
		
		WarmUp2::Loop();
		SpawnThemAll(2);
		UpdateSpectators();
		
		if (WarmUp2::Updated()) {
			UpdateLayerScoresTable(C_SequenceWarmUp);
			Clublink::DefineTeamAuto(True);
		}
		
		WarmUp2::ManageEvents();
		foreach (Event in PendingEvents) {
			if (Event.Type == CSmModeEvent::EType::OnHit && Event.Victim != Null && Event.WeaponNum == C_WeaponLaser) {
				DisplayHitDistance(Event.Shooter, Event.Victim, True);
			}
		}
		
		declare PlayersNbClan1 = WarmUp2::GetPlayersNb("Clan1");
		declare PlayersNbClan2 = WarmUp2::GetPlayersNb("Clan2");
		declare ReadyPlayersClan1 = WarmUp2::GetReadyPlayersNb("Clan1");
		declare ReadyPlayersClan2 = WarmUp2::GetReadyPlayersNb("Clan2");
		
		if (WarmUpDuration <= 0) {
			if (S_Mode == 0) {
				if (PlayersNbClan1 >= C_RequiredPlayersNb && PlayersNbClan2 >= C_RequiredPlayersNb) EndTime = Now;
			} else {
				if (PlayersNbClan1 >= 1 && PlayersNbClan2 >= 1) EndTime = Now;
			}
		} else if (ReadyPlayersClan1 >= C_RequiredPlayersNb && ReadyPlayersClan2 >= C_RequiredPlayersNb) {
			if (EndTime < 0 || EndTime > Now + 5000) EndTime = Now + 5000;
		} else if (ReadyPlayersClan1 >= 1 && ReadyPlayersClan2 >= 1) {
			if (S_Mode == 0) {
				if (PlayersNbClan1 >= C_RequiredPlayersNb && PlayersNbClan2 >= C_RequiredPlayersNb) {
					if (EndTime < 0 || EndTime != TmpEndTime) {
						if (TmpEndTime < 0) TmpEndTime = Now + (WarmUpDuration * 1000);
						EndTime = TmpEndTime;
					}
				} else {
					if (EndTime >= 0) {
						TmpEndTime = -1;
						EndTime = -1;
					}
				}
			} else {
				if (ReadyPlayersClan1 >= PlayersNbClan1 && ReadyPlayersClan2 >= PlayersNbClan2) {
					if (EndTime < 0 || EndTime > Now + 5000) EndTime = Now + 5000;
				} else {
					if (EndTime < 0 || EndTime != TmpEndTime) {
						if (TmpEndTime < 0) TmpEndTime = Now + (WarmUpDuration * 1000);
						EndTime = TmpEndTime;
					}
				}
			}
		} else {
			if (EndTime >= 0) {
				TmpEndTime = -1;
				EndTime = -1;
			}
		}
	}
	
	WarmUp2::End();
	
	StartTime = -1;
	EndTime = -1;
	
	if (MB_UseScriptCallbacks && S_UseLegacyCallback) XmlRpc.SendCallback("EndWarmup", Json::Enfold(Json::Stringify("AllReady", True)));
	
	PlaySound(CUIConfig::EUISound::StartMatch, 0);
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	UIManager.UIAll.StatusMessage = "";
	UIManager.UIAll.BigMessage = "";
	SM::UnspawnAllPlayers();
	
	// ---------------------------------- //
	// Update the players clublinks
	if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
	else Clublink::DefineTeamFromUrl(S_ForceClublinkTeam1, S_ForceClublinkTeam2);
	Clublink::SyncUpdate();
	
	declare LayerUpdated = Layers::Update("ScoresTable", CreateLayerScoresTable());
	
	+++EndWarmUp+++
	XmlRpc::EndWarmUp();
}

// ---------------------------------- //
/// Custom stringify for RoundInfo
Text TurnStringify() {
	return Json::Merge([
		Json::Stringify("StartTime", StartTime),
		Json::Stringify("EndTime", EndTime),
		Json::Stringify("PoleTime", (EndTime - (S_TimePole * 1000)))
	]);
}

// ---------------------------------- //
/** Custom stringify for CSmPlayer
 *
 *	@param	_Name			The name of the stringified object
 *	@param	_Player			The player to stringify
 *	@param	_SendPosition	Add the player position
 */
Text PlayerStringify(Text _Name, CSmPlayer _Player, Boolean _SendPosition) {
	declare JSON = "";
	declare Merge = Text[];
	
	if (_Player != Null) {
		if (_Player.Score != Null) {
			declare NbHit for _Player.Score = 0;
			declare LaserHit for _Player.Score = 0;
			declare NbBeHit for _Player.Score = 0;
			
			JSON = Json::ObjectMerge("Score", [
				Json::Stringify("AtkPoints", _Player.Score.Points), 
				Json::Stringify("DefPoints", NbHit),
				Json::Stringify("GoalAverage", NbHit + LaserHit - NbBeHit)
			]);
		}
		
		if (_SendPosition) JSON = Json::Merge([JSON, Json::Stringify("Position", _Player.Position)]);
	}
	
	JSON = Json::StringifyMinimal(_Name, _Player, JSON);
	
	return JSON;
}

// ---------------------------------- //
/// Overload of PlayerStringify()
Text PlayerStringify(Text _Name, CSmPlayer _Player) {
	return PlayerStringify(_Name, _Player, False);
}

// ---------------------------------- //
/** Stringify the players of a clan inside an array
 *
 *	@param	_Name			The name of the stringified object
 *	@param	_Clan			The clan to stringify
 *	@param	_AddTurnHits	Add the turn hits details 
 */
Text PlayersStringify(Text _Name, Integer _Clan, Boolean _AddTurnHits) {
	declare ScoresString = "";
	declare TmpOrder = [1 => WarmUp2::GetGroup("Clan1"), 2 => WarmUp2::GetGroup("Clan2")];
	
	declare Start = 1;
	declare End = 2;
	
	if (_Clan == 1) {
		Start = 1; End = 1;
	} else if (_Clan == 2) {
		Start = 2; End = 2;
	}
	
	declare J = 1;
	for (I, Start, End) {
		foreach (Slot => Id in TmpOrder[I]) {
			if (Players.existskey(Id)) {
				declare Player <=> Players[Id];
				if (Player.Score == Null) continue;
				
				if (J > 1) ScoresString ^= ",";
				declare NbHit for Player.Score = 0;
				declare LaserHit for Player.Score = 0;
				declare NbBeHit for Player.Score = 0;
				
				declare Callback = Json::Merge([
					Json::Stringify("Login", Player.Login),
					Json::Stringify("CurrentClan", Player.CurrentClan),
					Json::Stringify("AtkPoints", Player.Score.Points), 
					Json::Stringify("DefPoints", NbHit),
					Json::Stringify("GoalAverage", NbHit + LaserHit - NbBeHit)
				]);
				
				if (_AddTurnHits) {
					declare netwrite Integer[] Net_Elite_HitDetail for Player;
					declare HitsDetails = "[";
					foreach (Key => Hit in Net_Elite_HitDetail) {
						if (Key > 0) HitsDetails ^= ",";
						HitsDetails ^= Hit;
					}
					HitsDetails ^= "]";
					Callback = Json::Merge([Callback, """"TurnHits": {{{HitsDetails}}}"""]);
				}
				
				ScoresString ^= """{"""^Callback^"""}""";
				J += 1;
			}
		}
	}
	
	return """
"{{{_Name}}}":
[
	{{{ScoresString}}}
]""";
}

// ---------------------------------- //
/// Overload of PlayersStringify()
Text PlayersStringify(Text _Name, Integer _Clan) {
	return PlayersStringify(_Name, _Clan, False);
}